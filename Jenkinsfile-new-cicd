def sendEmail(message, result) {
    sh "echo '##### The compilation was ${result} ##############'"
    mail bcc: '', body: "${message}", cc: '', from: 'mmoran@minsait.com', replyTo: '', subject: "[${result}] Compilation", to: 'mmoran@minsait.com' 
}

properties(
  [pipelineTriggers([cron('@midnight')]),buildDiscarder(logRotator(numToKeepStr: '2')),disableConcurrentBuilds(abortPrevious: true)]
  )
podTemplate(name: "imageBuilder",
            yaml: """
    apiVersion: v1
    kind: Pod
    spec:
      containers:
      - name: mavenjdk17
        image: maven:3.8.2-openjdk-17
        command: ['sleep', '99d']
        env:
        - name: SOURCESPATH
          value: sources  
        - name: FLOWENGINEPATH
          value: sources/modules/flow-engine/docker
        volumeMounts:
        - name: m2repo
          mountPath: /root/.m2            
      - name: git
        image: bitnami/git:latest
        command: ['sleep', '99d']
      - name: docker-client
        image: docker:19.03.1
        command: ['sleep', '99d']
        env:
        - name: DOCKER_HOST
          value: tcp://localhost:2375
        - name: DOCKERSCRIPTS
          value: devops/build-deploy/docker/scripts              
      - name: docker-daemon
        image: docker:19.03.1-dind
        env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
        securityContext:
          privileged: true
        volumeMounts:
        - name: cache
          mountPath: /var/lib/docker        
      volumes:
        - name: cache
          hostPath:
            path: /datadrive/cache
            type: Directory
        - name: m2repo
          persistentVolumeClaim:
            claimName: m2repo-pvc
      nodeName: onesaitplatform-stable-01                
      hostAliases:
      - ip: 10.86.1.113
        hostnames:
        - jenkins.onesaitplatform.com       
""")  {
        
    node(POD_LABEL) {

    stage('Download source code') {
      sh "git config --global http.postBuffer 157286400"
      checkout([$class: 'GitSCM',
          branches: [[name: '*/develop' ]],
          userRemoteConfigs: [[
              url: 'https://gitlab.devops.onesait.com/onesait/platform/engine/onesait-platform/onesait-cloud-platform.git',
              credentialsId: 'gitlab-ssdd-integration'
          ]]
      ])
    }

		stage('Base software installation') {
      container('docker-client') {
          stage('Start databases') {
            try {
              sh "apk add curl"
              sh "curl -L 'https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-linux-x86_64' -o /usr/local/bin/docker-compose"
              sh "chmod +x /usr/local/bin/docker-compose"
              dir("devops/build-deploy/docker/data") {
                  sh "docker-compose up -d || true"
              }
            } catch(Exception e) {
                sendEmail(e, 'FAILED')
                throw e
            }  
          }
      }          
    }

		stage('Build Artifacts') {
      container('mavenjdk17') {
          stage('Build a Maven project') {
            try {
              dir("${env.WORKSPACE}/sources") {
                    sh "mvn clean install -P integration,no-test"
              }
            } catch(Exception e) {
                sendEmail(e, 'FAILED')
                throw e
            }
          }
      }
    }

		stage('Generate and launch ConfigInit') {
      container('docker-client') {
          stage('Generate and launch ConfigInit') {
              try {
                dir("devops/build-deploy/docker") {
                  sh "sed '1s/bash/sh/' image-generation.sh >> image-generation-sh.sh"
                    sh "chmod ugo+x image-generation-sh.sh"
                    sh "./image-generation-sh.sh -1"
                }
                dir("devops/build-deploy/docker/data") {
                  sh "docker-compose -f docker-compose.cicd-initdb.yml up || true"
                }
              } catch(Exception e) {
                sendEmail(e, 'FAILED')
                throw e
            }
          }
      }          
    }

		stage('Execute Tests') {
      container('mavenjdk17') {
          stage('Execute Tests') {
            try {
              dir("${env.WORKSPACE}/sources") {
                sh "mvn verify -P integration,unit-test"
              }
            } catch(Exception e) {
                sendEmail(e, 'FAILED')
                throw e
            }  
          }
      }
    }

    stage('Sending notification email') {
        script {
            sendEmail('The compilation has been sucsessful! :)', 'SUCCESS')    
        }            
    }
  }
}

