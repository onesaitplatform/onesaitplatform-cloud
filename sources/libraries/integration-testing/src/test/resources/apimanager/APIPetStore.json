{
  "identification": "pet-store",
  "version": 1,
  "type": "EXTERNAL_FROM_JSON",
  "isPublic": false,
  "category": "ALL",
  "externalApi": true,
  "ontologyId": null,
  "apiLimit": null,
  "endpoint": "http://localhost:19100/api-manager/server/api/v1/petstore",
  "endpointExt": "",
  "description": "",
  "metainf": "",
  "imageType": null,
  "status": "CREATED",
  "creationDate": "2020-02-25 18:49:55.0",
  "userId": "developer",
  "swaggerJson": "swagger: '2.0'\r\ninfo:\r\n   description: 'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io)\r\n      or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key`\r\n      to test the authorization filters.'\r\n   version: 1.0.0\r\n   title: Swagger Petstore\r\n   termsOfService: http://swagger.io/terms/\r\n   contact:\r\n      email: apiteam@swagger.io\r\n   license:\r\n      name: Apache 2.0\r\n      url: http://www.apache.org/licenses/LICENSE-2.0.html\r\nhost: petstore.swagger.io\r\nbasePath: /v2\r\ntags:\r\n-  name: pet\r\n   description: Everything about your Pets\r\n   externalDocs:\r\n      description: Find out more\r\n      url: http://swagger.io\r\n-  name: store\r\n   description: Access to Petstore orders\r\n-  name: user\r\n   description: Operations about user\r\n   externalDocs:\r\n      description: Find out more about our store\r\n      url: http://swagger.io\r\nschemes:\r\n- https\r\n- http\r\npaths:\r\n   /pet:\r\n      post:\r\n         tags:\r\n         - pet\r\n         summary: Add a new pet to the store\r\n         description: ''\r\n         operationId: addPet\r\n         consumes:\r\n         - application/json\r\n         - application/xml\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  in: body\r\n            name: body\r\n            description: Pet object that needs to be added to the store\r\n            required: true\r\n            schema:\r\n               $ref: '#/definitions/Pet'\r\n         responses:\r\n            '405':\r\n               description: Invalid input\r\n         security:\r\n         -  petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      put:\r\n         tags:\r\n         - pet\r\n         summary: Update an existing pet\r\n         description: ''\r\n         operationId: updatePet\r\n         consumes:\r\n         - application/json\r\n         - application/xml\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  in: body\r\n            name: body\r\n            description: Pet object that needs to be added to the store\r\n            required: true\r\n            schema:\r\n               $ref: '#/definitions/Pet'\r\n         responses:\r\n            '400':\r\n               description: Invalid ID supplied\r\n            '404':\r\n               description: Pet not found\r\n            '405':\r\n               description: Validation exception\r\n         security:\r\n         -  petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n   /pet/findByStatus:\r\n      get:\r\n         tags:\r\n         - pet\r\n         summary: Finds Pets by status\r\n         description: Multiple status values can be provided with comma separated strings\r\n         operationId: findPetsByStatus\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: status\r\n            in: query\r\n            description: Status values that need to be considered for filter\r\n            required: true\r\n            type: array\r\n            items:\r\n               type: string\r\n               enum:\r\n               - available\r\n               - pending\r\n               - sold\r\n               default: available\r\n            collectionFormat: multi\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  type: array\r\n                  items:\r\n                     $ref: '#/definitions/Pet'\r\n            '400':\r\n               description: Invalid status value\r\n         security:\r\n         -  petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n   /pet/findByTags:\r\n      get:\r\n         tags:\r\n         - pet\r\n         summary: Finds Pets by tags\r\n         description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\r\n         operationId: findPetsByTags\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: tags\r\n            in: query\r\n            description: Tags to filter by\r\n            required: true\r\n            type: array\r\n            items:\r\n               type: string\r\n            collectionFormat: multi\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  type: array\r\n                  items:\r\n                     $ref: '#/definitions/Pet'\r\n            '400':\r\n               description: Invalid tag value\r\n         security:\r\n         -  petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n         deprecated: true\r\n   /pet/{petId}:\r\n      get:\r\n         tags:\r\n         - pet\r\n         summary: Find pet by ID\r\n         description: Returns a single pet\r\n         operationId: getPetById\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: petId\r\n            in: path\r\n            description: ID of pet to return\r\n            required: true\r\n            type: integer\r\n            format: int64\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  $ref: '#/definitions/Pet'\r\n            '400':\r\n               description: Invalid ID supplied\r\n            '404':\r\n               description: Pet not found\r\n         security:\r\n         -  api_key: []\r\n      post:\r\n         tags:\r\n         - pet\r\n         summary: Updates a pet in the store with form data\r\n         description: ''\r\n         operationId: updatePetWithForm\r\n         consumes:\r\n         - application/x-www-form-urlencoded\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: petId\r\n            in: path\r\n            description: ID of pet that needs to be updated\r\n            required: true\r\n            type: integer\r\n            format: int64\r\n         -  name: name\r\n            in: formData\r\n            description: Updated name of the pet\r\n            required: false\r\n            type: string\r\n         -  name: status\r\n            in: formData\r\n            description: Updated status of the pet\r\n            required: false\r\n            type: string\r\n         responses:\r\n            '405':\r\n               description: Invalid input\r\n         security:\r\n         -  petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      delete:\r\n         tags:\r\n         - pet\r\n         summary: Deletes a pet\r\n         description: ''\r\n         operationId: deletePet\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: api_key\r\n            in: header\r\n            required: false\r\n            type: string\r\n         -  name: petId\r\n            in: path\r\n            description: Pet id to delete\r\n            required: true\r\n            type: integer\r\n            format: int64\r\n         responses:\r\n            '400':\r\n               description: Invalid ID supplied\r\n            '404':\r\n               description: Pet not found\r\n         security:\r\n         -  petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n   /pet/{petId}/uploadImage:\r\n      post:\r\n         tags:\r\n         - pet\r\n         summary: uploads an image\r\n         description: ''\r\n         operationId: uploadFile\r\n         consumes:\r\n         - multipart/form-data\r\n         produces:\r\n         - application/json\r\n         parameters:\r\n         -  name: petId\r\n            in: path\r\n            description: ID of pet to update\r\n            required: true\r\n            type: integer\r\n            format: int64\r\n         -  name: additionalMetadata\r\n            in: formData\r\n            description: Additional data to pass to server\r\n            required: false\r\n            type: string\r\n         -  name: file\r\n            in: formData\r\n            description: file to upload\r\n            required: false\r\n            type: file\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  $ref: '#/definitions/ApiResponse'\r\n         security:\r\n         -  petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n   /store/inventory:\r\n      get:\r\n         tags:\r\n         - store\r\n         summary: Returns pet inventories by status\r\n         description: Returns a map of status codes to quantities\r\n         operationId: getInventory\r\n         produces:\r\n         - application/json\r\n         parameters: []\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  type: object\r\n                  additionalProperties:\r\n                     type: integer\r\n                     format: int32\r\n         security:\r\n         -  api_key: []\r\n   /store/order:\r\n      post:\r\n         tags:\r\n         - store\r\n         summary: Place an order for a pet\r\n         description: ''\r\n         operationId: placeOrder\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  in: body\r\n            name: body\r\n            description: order placed for purchasing the pet\r\n            required: true\r\n            schema:\r\n               $ref: '#/definitions/Order'\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  $ref: '#/definitions/Order'\r\n            '400':\r\n               description: Invalid Order\r\n   /store/order/{orderId}:\r\n      get:\r\n         tags:\r\n         - store\r\n         summary: Find purchase order by ID\r\n         description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\r\n         operationId: getOrderById\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: orderId\r\n            in: path\r\n            description: ID of pet that needs to be fetched\r\n            required: true\r\n            type: integer\r\n            maximum: 10.0\r\n            minimum: 1.0\r\n            format: int64\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  $ref: '#/definitions/Order'\r\n            '400':\r\n               description: Invalid ID supplied\r\n            '404':\r\n               description: Order not found\r\n      delete:\r\n         tags:\r\n         - store\r\n         summary: Delete purchase order by ID\r\n         description: For valid response try integer IDs with positive integer value. Negative or non-integer values will\r\n            generate API errors\r\n         operationId: deleteOrder\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: orderId\r\n            in: path\r\n            description: ID of the order that needs to be deleted\r\n            required: true\r\n            type: integer\r\n            minimum: 1.0\r\n            format: int64\r\n         responses:\r\n            '400':\r\n               description: Invalid ID supplied\r\n            '404':\r\n               description: Order not found\r\n   /user:\r\n      post:\r\n         tags:\r\n         - user\r\n         summary: Create user\r\n         description: This can only be done by the logged in user.\r\n         operationId: createUser\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  in: body\r\n            name: body\r\n            description: Created user object\r\n            required: true\r\n            schema:\r\n               $ref: '#/definitions/User'\r\n         responses:\r\n            default:\r\n               description: successful operation\r\n   /user/createWithArray:\r\n      post:\r\n         tags:\r\n         - user\r\n         summary: Creates list of users with given input array\r\n         description: ''\r\n         operationId: createUsersWithArrayInput\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  in: body\r\n            name: body\r\n            description: List of user object\r\n            required: true\r\n            schema:\r\n               type: array\r\n               items:\r\n                  $ref: '#/definitions/User'\r\n         responses:\r\n            default:\r\n               description: successful operation\r\n   /user/createWithList:\r\n      post:\r\n         tags:\r\n         - user\r\n         summary: Creates list of users with given input array\r\n         description: ''\r\n         operationId: createUsersWithListInput\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  in: body\r\n            name: body\r\n            description: List of user object\r\n            required: true\r\n            schema:\r\n               type: array\r\n               items:\r\n                  $ref: '#/definitions/User'\r\n         responses:\r\n            default:\r\n               description: successful operation\r\n   /user/login:\r\n      get:\r\n         tags:\r\n         - user\r\n         summary: Logs user into the system\r\n         description: ''\r\n         operationId: loginUser\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: username\r\n            in: query\r\n            description: The user name for login\r\n            required: true\r\n            type: string\r\n         -  name: password\r\n            in: query\r\n            description: The password for login in clear text\r\n            required: true\r\n            type: string\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  type: string\r\n               headers:\r\n                  X-Rate-Limit:\r\n                     type: integer\r\n                     format: int32\r\n                     description: calls per hour allowed by the user\r\n                  X-Expires-After:\r\n                     type: string\r\n                     format: date-time\r\n                     description: date in UTC when token expires\r\n            '400':\r\n               description: Invalid username/password supplied\r\n   /user/logout:\r\n      get:\r\n         tags:\r\n         - user\r\n         summary: Logs out current logged in user session\r\n         description: ''\r\n         operationId: logoutUser\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters: []\r\n         responses:\r\n            default:\r\n               description: successful operation\r\n   /user/{username}:\r\n      get:\r\n         tags:\r\n         - user\r\n         summary: Get user by user name\r\n         description: ''\r\n         operationId: getUserByName\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: username\r\n            in: path\r\n            description: 'The name that needs to be fetched. Use user1 for testing. '\r\n            required: true\r\n            type: string\r\n         responses:\r\n            '200':\r\n               description: successful operation\r\n               schema:\r\n                  $ref: '#/definitions/User'\r\n            '400':\r\n               description: Invalid username supplied\r\n            '404':\r\n               description: User not found\r\n      put:\r\n         tags:\r\n         - user\r\n         summary: Updated user\r\n         description: This can only be done by the logged in user.\r\n         operationId: updateUser\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: username\r\n            in: path\r\n            description: name that need to be updated\r\n            required: true\r\n            type: string\r\n         -  in: body\r\n            name: body\r\n            description: Updated user object\r\n            required: true\r\n            schema:\r\n               $ref: '#/definitions/User'\r\n         responses:\r\n            '400':\r\n               description: Invalid user supplied\r\n            '404':\r\n               description: User not found\r\n      delete:\r\n         tags:\r\n         - user\r\n         summary: Delete user\r\n         description: This can only be done by the logged in user.\r\n         operationId: deleteUser\r\n         produces:\r\n         - application/xml\r\n         - application/json\r\n         parameters:\r\n         -  name: username\r\n            in: path\r\n            description: The name that needs to be deleted\r\n            required: true\r\n            type: string\r\n         responses:\r\n            '400':\r\n               description: Invalid username supplied\r\n            '404':\r\n               description: User not found\r\nsecurityDefinitions:\r\n   petstore_auth:\r\n      type: oauth2\r\n      authorizationUrl: https://petstore.swagger.io/oauth/authorize\r\n      flow: implicit\r\n      scopes:\r\n         write:pets: modify pets in your account\r\n         read:pets: read your pets\r\n   api_key:\r\n      type: apiKey\r\n      name: api_key\r\n      in: header\r\ndefinitions:\r\n   Order:\r\n      type: object\r\n      properties:\r\n         id:\r\n            type: integer\r\n            format: int64\r\n         petId:\r\n            type: integer\r\n            format: int64\r\n         quantity:\r\n            type: integer\r\n            format: int32\r\n         shipDate:\r\n            type: string\r\n            format: date-time\r\n         status:\r\n            type: string\r\n            description: Order Status\r\n            enum:\r\n            - placed\r\n            - approved\r\n            - delivered\r\n         complete:\r\n            type: boolean\r\n            default: false\r\n      xml:\r\n         name: Order\r\n   User:\r\n      type: object\r\n      properties:\r\n         id:\r\n            type: integer\r\n            format: int64\r\n         username:\r\n            type: string\r\n         firstName:\r\n            type: string\r\n         lastName:\r\n            type: string\r\n         email:\r\n            type: string\r\n         password:\r\n            type: string\r\n         phone:\r\n            type: string\r\n         userStatus:\r\n            type: integer\r\n            format: int32\r\n            description: User Status\r\n      xml:\r\n         name: User\r\n   Category:\r\n      type: object\r\n      properties:\r\n         id:\r\n            type: integer\r\n            format: int64\r\n         name:\r\n            type: string\r\n      xml:\r\n         name: Category\r\n   Tag:\r\n      type: object\r\n      properties:\r\n         id:\r\n            type: integer\r\n            format: int64\r\n         name:\r\n            type: string\r\n      xml:\r\n         name: Tag\r\n   Pet:\r\n      type: object\r\n      required:\r\n      - name\r\n      - photoUrls\r\n      properties:\r\n         id:\r\n            type: integer\r\n            format: int64\r\n         category:\r\n            $ref: '#/definitions/Category'\r\n         name:\r\n            type: string\r\n            example: doggie\r\n         photoUrls:\r\n            type: array\r\n            xml:\r\n               name: photoUrl\r\n               wrapped: true\r\n            items:\r\n               type: string\r\n         tags:\r\n            type: array\r\n            xml:\r\n               name: tag\r\n               wrapped: true\r\n            items:\r\n               $ref: '#/definitions/Tag'\r\n         status:\r\n            type: string\r\n            description: pet status in the store\r\n            enum:\r\n            - available\r\n            - pending\r\n            - sold\r\n      xml:\r\n         name: Pet\r\n   ApiResponse:\r\n      type: object\r\n      properties:\r\n         code:\r\n            type: integer\r\n            format: int32\r\n         type:\r\n            type: string\r\n         message:\r\n            type: string\r\nexternalDocs:\r\n   description: Find out more about Swagger\r\n   url: http://swagger.io",
  "operations": [
    
  ],
  "authentications": [
    
  ]
}