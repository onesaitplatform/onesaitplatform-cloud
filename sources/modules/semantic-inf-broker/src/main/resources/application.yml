##--spring.config.name=apimanager
##security.require_ssl: true
server: ## Config Web Server
   port: 20000
   contextPath: /router
   tomcat:
      access_log_enabled: true
      basedir: target/tomcat
   jetty.max-http-post-size: 20000000      

management.security.enabled: false
security.basic.enabled: false

#hawtio.authenticationEnabled: false
#hawtio.offline: true
     
onesaitplatform: #Config onesaitplatform specific
   audit.global.notify: false
   apimanager:
      cacheable: false
   iotbroker.plugable:
      gateway:
         kafka:
            enable: true
            host: localhost
            port: 9092
            partitions: 1
            replication: 1
            prefix: ONTOLOGY_
            group: ontologyGroup
            topic.pattern: ONTOLOGY.*
            router.topic: router
            consumer.consumersCount : 10
            consumer.seekTo : beginning 
            consumer.group : kafkaGroup
            consumer.maxPollRecords : 5000
   database.elasticsearch:
      database: onesaitplatform_rtdb_es
      sql.maxHttpConnections: 10
      sql.maxHttpConnectionsPerRoute: 10
      sql.connectionTimeout.millis: 10000
      sql.connector.http.endpoint: http://localhost:9200
      url: localhost
      port: 9300
   database.mongodb:
      database: onesaitplatform_rtdb
      authenticationDatabase:  #admin
      servers: localhost:27017
      autoConnectRetry: true
      socketTimeout: 5000
      maxAutoConnectRetryTime: 5000
      maxWaitTime: 5000
      useAuth: false
      username: #username
      password: #password
      readFromSecondaries: false
      queries.executionTimeout: 5000
      queries.defaultLimit: 2000
      queries.maxConcurrentQueries: 3
      writeConcern: UNACKNOWLEDGED
      tools.mongoexport.path: mongoexport
      tools.mongoimport.path: mongoimport
      tools.mongoshell.path: mongo
      tools.useSequentialOps: true   
      quasar.maxHttpConnections: 100
      quasar.maxHttpConnectionsPerRoute: 100
      quasar.connectionTimeout.millis: 60000
      quasar.connector.http.endpoint: http://localhost:18200/query/fs/ 
   database.hadoop.enabled: false
   database.hdfs:
      url: hdfs://127.0.0.1:8020
      basePath: /user/hdfs
   database.hive:
      url: jdbc:hive2://localhost:10000/default
      username: cloudera-scm
      password: 
      driverClassName: org.apache.hive.jdbc.HiveDriver
   database.impala:
      url: jdbc:hive2://localhost:21050/default;auth=noSasl
   database.kudu:
      numreplicas: 1
      address: localhost:7051
      includeKudutableName: false
      client:
        sessionTimeout: 60000
        flushMode: MANUAL_FLUSH
        prefix: impala::default.
        bossThreadPool: 1
        workerThreadPool: 4
        operationTimeout: 30000
        adminOperationTimeout: 30000
        socketReadTimeout: 10000
   database.timeseries.timezone: UTC

   router.avoidsslverification: true
   router.audit:
      enabled: true
      extractor.pool: 30
      process.events: true
   router.notifications.pool:
      nodered: 50
      kafka: 50
      rulesengine: 50

spring: ## General Config  
   application.name: onesaitplatform-semantic-inf-broker
   boot.admin: #Spring Boot Admin Config    
      url: http://localhost:18100/monitoring
      username: operations
      password: ENC(2Xd2AOD2NrMaWs915/st8C4ILo3qlHXv)
      client.metadata.user.name: ${spring.boot.admin.username}
      client.metadata.user.password: ${spring.boot.admin.password} 
   datasource: ## JPA Config
      url: jdbc:mysql://localhost:3306/onesaitplatform_config?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false&autoReconnect=true
      username: root
      password: ENC(v6o0Jud8aASYCkRb+u0RTICFUR8Pd5ph) 
      driver-class-name: com.mysql.jdbc.Driver
      # Validate the connection before borrowing it from the pool.
      test-on-borrow: true
      validation-query: SELECT 1
      test-while-idle: true
      test-on-return: false
      time-between-eviction-runs-millis: 5000
      min-evictable-idle-time-millis: 6000
      max-wait-millis: 10000
      # Number of ms to wait before throwing an exception if no connection is available.
      max-wait: 10000
      # Maximum number of active connections that can be allocated from this pool at the same time.
      initial-size: 10
      max-active: 30
      max-idle: 5
      min-idle: 5
      removeAbandoned: true
      
    #tomcat:
      # Number of ms to wait before throwing an exception if no connection is available.
      #max-wait: 10000
      # Maximum number of active connections that can be allocated from this pool at the same time.
      #max-active: 50
   jpa:
      # The SQL dialect makes Hibernate generate better SQL for the chosen database
      properties.hibernate.dialect: org.hibernate.dialect.MySQL5InnoDBDialect
      # Hibernate ddl auto (create, create-drop, validate, update
      hibernate.ddl-auto: validate
      properties:
        hibernate:
          format_sql: false
          show_sql: false
          

          #region.factory_class: com.hazelcast.hibernate.HazelcastCacheRegionFactory
          #cache:
            #use_second_level_cache: true
            #use_query_cache: true
            #region.factory_class: com.hazelcast.hibernate.HazelcastCacheRegionFactory
            #hazelcast:
            #  configuration_file_path: hazelcast-client.xml
            #  use_native_client: true
            #  native_client_address: localhost
            #  native_client_group: onesaitplatform
            #  native_client_password: onesaitplatform
   jmx:
    enabled: true
spring.elasticsearch.jest.uris: ${onesaitplatform.database.elasticsearch.sql.connector.http.endpoint}
spring.elasticsearch.jest.read-timeout: ${onesaitplatform.database.elasticsearch.sql.connectionTimeout.millis}

## LOGGING CONF
logging:
   path: ./target/ 
   file: ${spring.application.name}
   level:
      com.minsait: INFO
      org.springframework.boot: INFO
      org.apache.kafka: ERROR
#      org.springframework.boot.autoconfigure: DEBUG


      