<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.12.2">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.1.9">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>DOCKER_MODULETAGVALUE</string>
        <string>DOCKER_USERNAMEVALUE</string>
        <string>DOCKER_PUSHREGISTRY_PRIVATE</string>
        <string>GIT_URL</string>
        <string>GIT_BRANCHNAME</string>
        <string>PRIVATE_REGISTRY</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Microservice CI pipeline</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>1</daysToKeep>
        <numToKeep>1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_URL</name>
          <description>URL to the Git Repository</description>
          <defaultValue>{{GIT_REPOSITORY}}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_USER</name>
          <description>Git User</description>
          <defaultValue>{{GIT_USER}}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
         <hudson.model.StringParameterDefinition>
          <name>GIT_TOKEN</name>
          <description>Git Private token</description>
          <defaultValue>{{GIT_TOKEN}}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
         <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCHNAME</name>
          <description>deploy branch name</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_MODULETAGVALUE</name>
          <description>Image generation tag value</description>
          <defaultValue>latest</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_USERNAMEVALUE</name>
          <description>Image registry image namespace</description>
          <defaultValue>onesaitplatform</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_PUSHREGISTRY_PRIVATE</name>
          <description>Push image to private registry</description>
          <defaultValue>true</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
         <hudson.model.StringParameterDefinition>
          <name>PRIVATE_REGISTRY</name>
          <description>URL to the docker registry</description>
          <defaultValue>production-registry.devops.onesait.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.39">
    <script>pipeline {
   agent {
          kubernetes {
              defaultContainer &apos;jnlp&apos;
              yaml &quot;&quot;&quot;
  apiVersion: v1
  kind: Pod
  metadata:
    labels:
      maven-version: &quot;3.6.0&quot;
  spec:
    containers:
      - name: git
        image: alpine/git:latest
        command:
          - cat
        tty: true
      - name: maven
        image: maven:3.6.0-jdk-8-slim
        command:
          - cat
        tty: true
      - name: docker
        image: docker:dind
        securityContext:
          privileged: true
        command:
          - dockerd
        tty: true

  &quot;&quot;&quot;
          }
      }
   

   environment {          
      BASEPATH = &apos;{{MICROSERVICE_NAME}}&apos;
      BASEDIR_PATH = &apos;{SOURCES_PATH}}/base&apos;
      BASEPYTHONDIR_PATH = &apos;{{SOURCES_PATH}}/base-python&apos;
      NOTEBOOKDIR_PATH = &apos;{{SOURCES_PATH}}/notebook&apos;
      SOURCESPATH = &apos;{{SOURCES_PATH}}&apos;
      MICROSERVICE_NAME = &apos;{{MICROSERVICE_NAME}}&apos;
   }
   
   parameters { 
       string(name: &apos;GIT_URL&apos;, 
              defaultValue: &apos;{{GIT_REPOSITORY}}&apos;, 
              description: &apos;URL Git Repository&apos;)
       string(name: &apos;GIT_USER&apos;, 
              defaultValue: &apos;{{GIT_USER}}&apos;, 
              description: &apos;URL Git user&apos;)
       string(name: &apos;GIT_TOKEN&apos;, 
              defaultValue: &apos;{{GIT_TOKEN}}&apos;, 
              description: &apos;Git private tokeny&apos;)
       string(name: &apos;GIT_BRANCHNAME&apos;, 
              defaultValue: &apos;master&apos;, 
              description: &apos;deploy branch name&apos;)
       string(name: &apos;DOCKER_MODULETAGVALUE&apos;, 
              defaultValue: &apos;latest&apos;, 
              description: &apos;Image generation tag value&apos;)
       string(name: &apos;DOCKER_USERNAMEVALUE&apos;, 
              defaultValue: &apos;onesaitplatform&apos;, 
              description: &apos;Image registry image namespace&apos;)
       string(name: &apos;DOCKER_PUSHREGISTRY_PRIVATE&apos;, 
              defaultValue: &apos;true&apos;, 
              description: &apos;Push image to private registry&apos;)
      
   }    
   
   stages {
       stage(&apos;fetch&apos;) {  
          steps {  
            container(&apos;git&apos;) {

                 sh &quot;git clone \$(echo ${params.GIT_URL} | sed -e &apos;s/:\\/\\//:\\/\\/${params.GIT_USER}:${params.GIT_TOKEN}@/&apos;) ${env.BASEPATH}&quot;
                 dir(&quot;${env.BASEPATH}&quot;){
                   sh &quot;git checkout ${params.GIT_BRANCHNAME}&quot;
                   sh &apos;chmod 777 -R .&apos;
                 }
               
            }       
          }          
         }
         
     stage(&apos;deliver&apos;) {
        stages{
	        stage(&apos;Generate base image&apos;) {  
		        steps { 
		       	 container(&apos;docker&apos;){
		            dir(&quot;${env.BASEPATH}/${env.BASEDIR_PATH}&quot;) { 
		                echo &quot;Generating base image&quot;
		                sh &quot;docker build -t zeppelin_alpine .&quot;
		            }
		          }
		        }          
	     	}
	       stage(&apos;Generate base-python image&apos;) {  
		        steps { 
		        	container(&apos;docker&apos;){
			            dir(&quot;${env.BASEPATH}/${env.BASEPYTHONDIR_PATH}&quot;) { 
			                echo &quot;Generating base-python image&quot;
			                sh &quot;docker build -t zeppelin_alpine_python .&quot;
			            }
			          }
		        }          
	     	}
	     	stage(&apos;Generate Docker notebook image&apos;) {
		   		steps {
		   			container(&apos;docker&apos;){
			           dir(&quot;${env.BASEPATH}/${env.NOTEBOOKDIR_PATH}&quot;) {
			                echo &quot;Generating notebook image&quot;
			                 script{
					             img = docker.build("${params.DOCKER_USERNAMEVALUE}/${env.MICROSERVICE_NAME}:${params.DOCKER_MODULETAGVALUE}", "${env.DOCKERPATH}")
					         }
			                sh &quot;docker image inspect ${params.DOCKER_USERNAMEVALUE}/{{MICROSERVICE_NAME}}:${DOCKER_MODULETAGVALUE}&quot;
			           }
			         }
		        }
		     }
          	stage(&apos;Push Docker images&apos;) {
		        when {
		          expression { params.DOCKER_PUSHREGISTRY_PRIVATE == &apos;true&apos; }
		        }
		        steps {
		       	 container(&apos;docker&apos;){
			          script {
                        docker.withRegistry('https://production-registry.devops.onesait.com', 'registry-onesait') {
                            img.push()
                            img.push("latest")
                  	 }
		          }
		        }
		     }

           
        }
      }

    
   }

  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
