<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.12.2">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.1.9">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>DOCKER_MODULETAGVALUE</string>
        <string>DOCKER_USERNAMEVALUE</string>
        <string>DOCKER_PUSHREGISTRY_PRIVATE</string>
        <string>GIT_URL</string>
        <string>GIT_BRANCHNAME</string>
        <string>PRIVATE_REGISTRY</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>a
  </actions>
  <description>Microservice CI pipeline</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>1</daysToKeep>
        <numToKeep>1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_URL</name>
          <description>URL to the Git Repository</description>
          <defaultValue>{{GIT_REPOSITORY}}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
         <hudson.model.StringParameterDefinition>
          <name>GIT_USER</name>
          <description>Git User</description>
          <defaultValue>{{GIT_USER}}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
         <hudson.model.StringParameterDefinition>
          <name>GIT_TOKEN</name>
          <description>Git Private token</description>
          <defaultValue>{{GIT_TOKEN}}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
         <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCHNAME</name>
          <description>compilation branch name</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_MODULETAGVALUE</name>
          <description>Image generation tag value</description>
          <defaultValue>latest</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_USERNAMEVALUE</name>
          <description>Image registry image namespace</description>
          <defaultValue>onesaitplatform</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_PUSHREGISTRY_PRIVATE</name>
          <description>Push image to private registry</description>
          <defaultValue>true</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRIVATE_REGISTRY</name>
          <description>URL to the docker registry</description>
          <defaultValue>dcme-npro-onst-prd-devops-00/production-registry</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.39">
    <script>pipeline {
      agent {
          kubernetes {
              defaultContainer 'jnlp'
              yaml """
  apiVersion: v1
  kind: Pod
  metadata:
    labels:
      maven-version: "{{MAVEN_VERSION}}"
  spec:
    containers:
      - name: git
        image: alpine/git:latest
        command:
          - cat
        tty: true
      - name: maven
        image: {{MAVEN_IMG_VERSION}}
        command:
          - cat
        tty: true
        env:
            - name: DOCKER_HOST
              value: tcp://localhost:2375
      - name: docker-client
        image: docker:19.03.1
        command: ['sleep', '99d']
        env:
            - name: DOCKER_HOST
              value: tcp://localhost:2375
      - name: docker-daemon
        image: docker:19.03.1-dind
        env:
          - name: DOCKER_TLS_CERTDIR
            value: ""
        securityContext:
          privileged: true
      - name: kubectl
        image: lachlanevenson/k8s-kubectl:latest
        command:
          - cat
        tty: true


  """
          }
      }
     environment {          
        BASEPATH = '{{MICROSERVICE_NAME}}'
        SOURCESPATH = '{{SOURCES_PATH}}'
        DOCKERPATH = '{{DOCKER_PATH}}'
        MICROSERVICE_NAME = '{{MICROSERVICE_NAME}}'
     }
     
     parameters { 
       string(name: 'GIT_URL', 
              defaultValue: '{{GIT_REPOSITORY}}', 
              description: 'URL Git Repository')
       string(name: 'GIT_USER', 
              defaultValue: '{{GIT_USER}}', 
              description: 'URL Git user')
       string(name: 'GIT_TOKEN', 
              defaultValue: '{{GIT_TOKEN}}', 
              description: 'Git private token')
       string(name: 'GIT_BRANCHNAME', 
              defaultValue: 'master', 
              description: 'compilation branch name')
       string(name: 'DOCKER_MODULETAGVALUE', 
              defaultValue: 'latest', 
              description: 'Image generation tag value')
       string(name: 'DOCKER_USERNAMEVALUE', 
              defaultValue: 'onesaitplatform', 
              description: 'Image registry image namespace')
       string(name: 'DOCKER_PUSHREGISTRY_PRIVATE', 
              defaultValue: 'true', 
              description: 'Push image to private registry')
       string(name: 'PRIVATE_REGISTRY', 
              defaultValue: 'dcme-npro-onst-prd-devops-00/production-registry', 
              description: 'URL to the docker registry')
   }     
     
     stages {
         stage('fetch') {  
          steps {  
            container('git') {

                 sh "git clone \$(echo ${params.GIT_URL} | sed -e 's/:\\/\\//:\\/\\/${params.GIT_USER}:${params.GIT_TOKEN}@/') ${env.BASEPATH}"
                 dir("${env.BASEPATH}"){
                   sh 'chmod 777 -R .'
                   sh "git checkout ${params.GIT_BRANCHNAME}"
                 }
               
            }       
          }          
         }
       
       stage('build') {
          steps {
            container('maven') {
            dir("${env.BASEPATH}/${env.SOURCESPATH}"){
                sh 'mkdir -p $HOME/.m2'
               
                sh 'mvn clean install -DskipTests=true'
                }
            }
             
          }
       }
      stage('deliver') {
        stages{
           stage('build-image') {
              steps {
               // variable sustitution
               container('docker-client'){
                 dir("${env.BASEPATH}") {
                  sh "cp ${SOURCESPATH}/target/*.jar ${env.DOCKERPATH}"
                  script {
                   img = docker.build("${PRIVATE_REGISTRY}/${env.MICROSERVICE_NAME}:${params.DOCKER_MODULETAGVALUE}", "--network host ${env.DOCKERPATH}")
                  }
                 }
                }
              }
           }

           stage('deliver image') {
              when {
                expression { params.DOCKER_PUSHREGISTRY_PRIVATE == 'true' }
              }
              steps {
                container('docker-client'){
      				 script {
      				 docker.withRegistry("https://europe-docker.pkg.dev", "production-registry-write") {
                            img.push()
                        }
                    }
                 }
              }
           }
        }
      }
      
    }
  }</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
