{
  "navigation": {
    "showBreadcrumbIcon": false,
    "showBreadcrumb": false
  },
  "pages": [
    {
      "combinelayers": false,
      "background": {
        "file": [],
        "color": "hsla(0, 25%, 83%, 0.01)"
      },
      "selectedlayer": 0,
      "icon": "apps",
      "layers": [
        {
          "gridboard": [
            {
              "$$hashKey": "object:73"
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "hsla(0, 0%, 100%, 0)",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "filters": [
                {
                  "targetList": [
                    {
                      "gadgetId": "livehtml_1669717583701",
                      "overwriteField": "entity",
                      "field": "entity"
                    }
                  ],
                  "hide": true,
                  "data": {
                    "optionsDescription": [],
                    "optionsSelected": [],
                    "options": [],
                    "ds": ""
                  },
                  "name": "entity",
                  "id": "entity",
                  "type": "multiselectfilter",
                  "$$hashKey": "object:2917",
                  "typeAction": "filter"
                },
                {
                  "targetList": [
                    {
                      "gadgetId": "livehtml_1669717583701",
                      "overwriteField": "user",
                      "field": "user"
                    }
                  ],
                  "hide": true,
                  "data": {
                    "optionsSelected": [],
                    "ds": ""
                  },
                  "name": "user",
                  "id": "user",
                  "type": "multiselectfilter",
                  "$$hashKey": "object:2907",
                  "typeAction": "filter"
                },
                {
                  "targetList": [
                    {
                      "gadgetId": "livehtml_1669717583701",
                      "overwriteField": "status",
                      "field": "status"
                    }
                  ],
                  "hide": true,
                  "data": {
                    "optionsDescription": [],
                    "optionsSelected": [],
                    "options": [],
                    "ds": ""
                  },
                  "name": "status",
                  "id": "status",
                  "type": "multiselectfilter",
                  "$$hashKey": "object:2924",
                  "typeAction": "filter"
                },
                {
                  "targetList": [
                    {
                      "gadgetId": "livehtml_1669717583701",
                      "overwriteField": "source",
                      "field": "source"
                    }
                  ],
                  "hide": true,
                  "data": {
                    "optionsDescription": [],
                    "optionsSelected": [],
                    "options": [],
                    "ds": ""
                  },
                  "name": "source",
                  "id": "source",
                  "type": "multiselectfilter",
                  "$$hashKey": "object:2931",
                  "typeAction": "filter"
                },
                {
                  "targetList": [
                    {
                      "gadgetId": "livehtml_1669717583701",
                      "overwriteField": "queryType",
                      "field": "queryType"
                    }
                  ],
                  "hide": true,
                  "data": {
                    "optionsDescription": [],
                    "optionsSelected": [],
                    "options": [],
                    "ds": ""
                  },
                  "name": "queryType",
                  "id": "queryType",
                  "type": "multiselectfilter",
                  "$$hashKey": "object:2938",
                  "typeAction": "filter"
                }
              ],
              "prettyTitle": "header (livehtml)",
              "rows": 3,
              "type": "livehtml",
              "$$hashKey": "object:89",
              "content": "<!-- Write your HTML <div></div> and CSS <style></style> here -->\n<!--Focus here and F11 to full screen editor-->\n<style>\n\t  gridster-item { box-shadow: 0 0.75rem 1.5rem rgb(18 38 63 / 3%); }\n\n\t.page-title-box {\n\t\tpadding-bottom: 24px;\n\t\tmargin-top: 8px\n\t}\n\n\t.align-items-center {\n\t\talign-items: center !important;\n\t}\n\n\t.justify-content-between {\n\t\tjustify-content: space-between !important;\n\t}\n\n\t.d-flex {\n\t\tdisplay: flex !important;\n\t}\n\n\t.page-title-right ol.breadcrumb {\n\t\tmargin-bottom: 0;\n\t}\n\n\t.page-title-box .breadcrumb {\n\t\tbackground-color: transparent;\n\t\tpadding: 0;\n\t}\n\n\t.breadcrumb {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tpadding: 0.75rem 1rem;\n\t\tmargin-bottom: 1rem;\n\t\tlist-style: none;\n\t}\n\n\t.breadcrumb-item>a {\n\t\tcolor: #495057;\n\t\tfont-size: 0.8125rem;\n\t}\n\n\t.breadcrumb-item.active {\n\t\tcolor: #74788d;\n\t\tfont-size: 0.8125rem;\n\t}\n\n\t.font-size-16 {\n\t\ttext-transform: uppercase;\n\t\tfont-weight: 600;\n\t\tfont-size: 16px !important;\n\t\tfont-family: 'Poppins';\n\t}\n\n\t.no-shadow {\n\t\tbox-shadow: none !important\n\t}\n\n\t.el-button--primary {\n\t\tcolor: #fff;\n\t\tbackground-color: #0e668c;\n\t\tborder-color: #0e668c;\n\t}\n</style>\n\n\n<div class=\"page-title-box d-flex align-items-center  gadget-header\">\n\t<!--<h4 class=\"mb-0 font-size-16\" style=\"font-family: Soho;font-size:1rem;\">QUERY METRICS</h4>-->\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Entity</label>\n\t\t<el-select v-model=\"valueEntity\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 240px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsEntity\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Source</label>\n\t\t<el-select v-model=\"valueSource\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 240px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsSource\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Query Type</label>\n\t\t<el-select v-model=\"valueQueryType\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 240px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsQueryType\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Users</label>\n\t\t<el-select v-model=\"valueUsers\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 240px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsUsers\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Status</label>\n\t\t<el-select v-model=\"valueStatus\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 240px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsStatus\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t<div style=\"display: flex; justify-content: flex-end;width: 20%;margin-top:19px;\">\n\t\t<el-button type=\"primary\" icon=\"el-icon-search\" v-on:click=\"search\" size=\"mini\">Search</el-button>\n\t\t<el-button type=\"text\" v-on:click=\"reset\" size=\"mini\">Reset</el-button>\n\t</div>\n\n</div>",
              "nomargin": false,
              "contentcode": "//Write your Vue with ODS JSON controller code here\n//Focus here and F11 to full screen editor\n//This function will be call once to init components\nvm.vueconfig = {\n  el: document.querySelector('#' + vm.id + ' vuetemplate .gadget-header'),\n  data: {\n    ds: [],\n\n    optionsEntity: [],\n    valueEntity: [],\n\n    optionsQueryType: [],\n    valueQueryType: [],\n\n    optionsQuery: [],\n    valueQuery: [],\n\n    optionsSource: [],\n    valueSource: [],\n\n    optionsStatus: [],\n    valueStatus: [],\n\n    optionsUsers: [],\n    valueUsers: [],\n\n\n    size: 'hecto',\n    placeholder: 'Select',\n    selectLabel: 'Organization',\n    name: 'orgid',\n    disabled: false,\n    clearable: true,\n    loading: false,\n    loadingText: 'Loading',\n    noMatchText: 'No matching data',\n    noDataText: 'No data',\n    popperClass: '',\n    filterable: false,\n    allowCreate: false,\n    multiple: true,\n    multipleLimit: 0,\n    collapseTags: true,\n    labelOptionGroup: null,\n    disabledOptionGroup: null,\n    valueOption: '',\n    label: '',\n    disabledOption: false,\n    remote: false,\n    reserveKeyword: false,\n    defaultFirstOption: false,\n    popperAppendToBody: true,\n    automaticDropdown: false,\n    accentBlock: false,\n    rtl: false\n  },\n  methods: {\n    drawVueComponent: function (newData, oldData) {\n\n    },\n    resizeEvent: function () {\n      //Resize event\n    },\n    destroyVueComponent: function () {\n      vm.vueapp.$destroy();\n    },\n    receiveValue: function (data) {\n      //data received from datalink\n    },\n    sendValue: vm.sendValue,\n    sendFilter: vm.sendFilter,\n    gridsterClass(cssClass) {\n      this.$el.parentElement.parentElement.parentElement.parentElement.className += ' ' + cssClass\n    },\n    \n\n\n    search: function (e) {\n      for (var i = 0; i < vm.filters.length; i++) {\n        if (vm.filters[i].id == 'entity') {\n          vm.filters[i].data.optionsSelected = this.valueEntity;\n        }\n        else if (vm.filters[i].id == 'user') {\n          vm.filters[i].data.optionsSelected = this.valueUsers;\n        }\n        else if (vm.filters[i].id == 'source') {\n          vm.filters[i].data.optionsSelected = this.valueSource;\n        }\n        else if (vm.filters[i].id == 'status') {\n          vm.filters[i].data.optionsSelected = this.valueStatus;\n        } else if (vm.filters[i].id == 'queryType') {\n          vm.filters[i].data.optionsSelected = this.valueQueryType;\n        }\n      }\n      vm.sendFilters();\n    },\n    reset: function (e) {\n\n      this.valueEntity = [];\n      this.valueQueryType = [];\n      this.valueSource = [];\n      this.valueStatus = [];\n      this.valueUsers = [];\n      this.search();\n    },\n\n\n  },\n  mounted() {\n    var that = this;\n    this.gridsterClass('no-shadow');\n\n    //ENTITY\n    vm.get(\"QueryMetrics_distinct_entity\").then(\n      function (newData) {\n        that.optionsEntity = [];\n        if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n          for (var i = 0; i < newData.length; i++) {\n            that.optionsEntity.push({ value: newData[i].entity, label: newData[i].entity });\n          }\n        }\n      }\n    );\n\n    //QUERY TYPE\n    vm.get(\"QueryMetrics_distinct_queryType\").then(\n      function (newData) {\n        that.optionsQueryType = [];\n        if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n          for (var i = 0; i < newData.length; i++) {\n            that.optionsQueryType.push({ value: newData[i].queryType, label: newData[i].queryType });\n          }\n        }\n      }\n    );\n    \n   \n\n    //SOURCE\n    vm.get(\"QueryMetrics_distinct_source\").then(\n      function (newData) {\n        that.optionsSource = [];\n        if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n          for (var i = 0; i < newData.length; i++) {\n            that.optionsSource.push({ value: newData[i].source, label: newData[i].source });\n          }\n        }\n      }\n    );\n    //STATUS\n    vm.get(\"QueryMetrics_distinct_status\").then(\n      function (newData) {\n        that.optionsStatus = [];\n        if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n          for (var i = 0; i < newData.length; i++) {\n            that.optionsStatus.push({ value: newData[i].status, label: newData[i].status });\n          }\n        }\n      }\n    );\n    //USERS\n    vm.get(\"QueryMetrics_distinct_users\").then(\n      function (newData) {\n        that.optionsUsers = [];\n        if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n          for (var i = 0; i < newData.length; i++) {\n            that.optionsUsers.push({ value: newData[i].user, label: newData[i].user });\n          }\n        }\n      }\n    );\n\n\n\n\n  }\n}\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);",
              "subtype": "vueJS",
              "datasource": "",
              "x": 0,
              "y": 0,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "header",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1669717583701",
              "customMenuOptions": [],
              "cols": 50
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "source_kpi_error (livehtml)",
              "rows": 3,
              "type": "livehtml",
              "$$hashKey": "object:688",
              "content": "<style>\n .gadget-app { font-family: Poppins}\n   gridster-item { box-shadow: 0 0.75rem 1.5rem rgb(18 38 63 / 3%); }\n\n\n  .card {   margin-top: 0px; } \n  \n}\n.card-body {\n    flex: 1 1 auto;\n    padding: 1rem;   \n}\n.mb-3 {\n    margin-bottom: 1rem!important;\n}\n.align-items-center {\n    align-items: center!important;\n}\n.d-flex {\n    display: flex!important;\n}\n.avatar-xs {\n    height: 2rem;\n    width: 2rem;\n}\n.me-3 {\n    margin-right: 1rem!important;\n}\n.font-size-14 {\n    font-size: 14px!important;\n     font-family: 'Poppins'\n}\n.mb-0 {\n    margin-bottom: 0!important;\n}\n.bg-primary.bg-soft {\n    background-color: rgba(85,110,230,.25)!important;\n}\n.font-size-18 {\n    font-size: 18px!important;\n    font-family: 'Poppins'\n}\n.avatar-title {\n    align-items: center;\n    background-color: #556ee6;\n    color: #fff;\n    display: flex;\n    font-weight: 500;\n    height: 100%;\n    justify-content: center;\n    width: 100%;\n}\n.rounded-circle {\n    border-radius: 50%!important;\n}\n.text-primary {\n    color: rgba(85,110,230,1)!important;\n}\n.ods-icon-xs { font-size: 1rem}\n\n.text-muted { \n    color: #74788d!important;\n}\n.mt-4 {\n    margin-top: 1.5rem!important;\n}\n.text-success {\n    color: rgba(52,195,143,1)!important;\n}\n\n.ods-kpi-number { font-size: 1.22rem; font-weight: 500; color: #333; margin-top: 0; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2;}\n\n.font-size-12 {\n    font-size: 12px!important;\n}\n.badge-soft-success {\n    color: #34c38f!important;\n    background-color: rgba(52,195,143,.18)!important;\n}\n.badge-soft-warning {\n    color: #f1b44c!important;\n    background-color: rgba(241,180,76,.18)!important;\n}\n\n.badge {\n    display: inline-block;\n    padding: 0.25em 0.4em;\n    font-size: 75%;\n    font-weight: 500;\n    line-height: 1;\n    color: #fff;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: baseline;\n    border-radius: 0.25rem;\n}\n.ms-2 {\n    margin-left: 0.5rem!important;\n}\n\n.text-truncate {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: 0.8125rem;\n    margin-top: .2rem;\n}\n    .gadget-simplekpi {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      justify-content: start;\n      align-items: start;\n      margin-top:0px;     \n      font-family: 'Poppins', sans-serif;\n      overflow: hidden;     \n    }\n    \n    .ods-icon-sm {font-size: 1.5rem }\n    .avatar-sm {  height: 3rem; width: 3rem; }\n    .align-items-right { justify-content: end; }\n\n    .skeleton {\n      display: grid;\n      grid-template: 1fr 1fr/25% 1fr;\n      gap: calc(1rem * 0.5);\n      width: clamp(275px, 20vmin, 10rem);\n      padding: 1rem;\n      border: 0px solid rgba(37, 38, 39, 0.1);\n      border-radius: calc(1rem * 0.5);\n      background-color:  hsl(0 0% 0% / 0%);\n    }\n\n    .skeleton__block {\n      background: linear-gradient(-75deg, transparent 40%, hsl(0 0% 100% / 40%), transparent 60%) 0 0/200% 100%, hsl(0 0% 0% / 12%);\n      border-radius: calc(1rem * 0.5);\n      animation: load 2s infinite linear;\n      background-attachment: fixed;\n    }\n\n    @keyframes load {\n      to {\n        background-position: 200% 0;\n      }\n    }\n    .skeleton__block:first-of-type {\n      grid-row: 1/-1;\n      aspect-ratio: 1;\n    }\n\n  .bg-kpi {\n    background-color: rgb(171 121 13 / 25%)!important;\n  }\n\n  .framework__kpi-text {\n      font-size: 0.85rem;\n      line-height: 24px;       \n      white-space: nowrap;\n  }\n\n  .framework__downloads abbr { font-size: 75%}\n\n \n\n    .avatar-title {\n      box-shadow: 0 0 0 rgba(204,169,44, 0.4);\n      animation: pulse 2s infinite;\n    }\n\n    \n    @-webkit-keyframes pulse {\n      0% {\n        -webkit-box-shadow: 0 0 0 0 rgba(204,169,44, 0.4);\n      }\n      70% {\n          -webkit-box-shadow: 0 0 0 10px rgba(204,169,44, 0);\n      }\n      100% {\n          -webkit-box-shadow: 0 0 0 0 rgba(204,169,44, 0);\n      }\n    }\n    @keyframes pulse {\n      0% {\n        -moz-box-shadow: 0 0 0 0 rgba(204,169,44, 0.4);\n        box-shadow: 0 0 0 0 rgba(204,169,44, 0.4);\n      }\n      70% {\n          -moz-box-shadow: 0 0 0 10px rgba(204,169,44, 0);\n          box-shadow: 0 0 0 10px rgba(204,169,44, 0);\n      }\n      100% {\n          -moz-box-shadow: 0 0 0 0 rgba(204,169,44, 0);\n          box-shadow: 0 0 0 0 rgba(204,169,44, 0);\n      }\n    }\n    \n    \n</style>\n<!--Focus here and F11 to full screen editor-->\n<div class=\"gadget-simplekpi\" >  \n  <div v-if=\"loading\" class=\"skeleton\">\n    <div class=\"skeleton__block\"></div>\n    <div class=\"skeleton__block\"></div>\n    <div class=\"skeleton__block\"></div>\n  </div>\n   <!-- COMPONENT BEGIN -->\n  <div class=\"component\" v-else style=\"margin-top: 8px\">    \n      <h3  class=\"component-title\" v-if=\"component.showTitle\">{{component.title}}</h3>   \n      <div class=\"component-cards\" :style=\"setGridLayout\">\n        <div class=\"component-card summary\" v-if=\"component.summary.show\" :style=\"setComponentLayout('summary')\" >\n          <!--SUMMARY BEGIN -->   \n          <div class=\"component-card_header\" v-if=\"component.summary.showTitle\">\n            <h4 class=\"component-card_title\">{{component.summary.title}}</h4>\n          </div>\n          <div class=\"framework__data\">\n            <div class=\"framework__data-info\">\n              <div class=\"framework__period\">                \n                <span class=\"framework__kpi-text\">TOTAL REALIZED QUERIES</span>\n              </div>\n              <strong class=\"framework__downloads\">{{ Number(total).toLocaleString() }} </strong>\n            </div>         \n          </div>\n        </div>                \n        <!-- SUMMARY END -->\n        <div class=\"component-card chart\" v-if=\"component.chart.show\" :style=\"setComponentLayout('chart')\" >\n          <!-- CHART BEGIN -->                          \n           <div class=\"d-flex\" :class=\"component.chart.order === 1 ? 'align-items-left' : 'align-items-right'\">\n              <div class=\"avatar-sm\">\n                <span class=\"avatar-title rounded-circle bg-kpi\"><i class=\"ods-icon-calendar ods-icon-sm\"></i></span>\n              </div>              \n            </div>\n      </div>\n    </div>\n    <!-- COMPONENT END -->\n  </div>\n</div>\n",
              "nomargin": false,
              "contentcode": "//Write your Vue with ODS JSON controller code here\n\n//Focus here and F11 to full screen editor\n\n//This function will be call once to init components\n\nvm.vueconfig = {\n\tel: document.querySelector('#' + vm.id + ' vuetemplate .gadget-simplekpi'),\n\tdata:{\n\t\tds:[],\n\t\tmaskId: 'gadget-simplekpi',\n\t\telClass: '',\n\t\tcontainerClass: '',\n\t\tbackground: '#D96D73',\n\t\tbackgroundLoaded: '#FFF',\n\t\tloading: true,\n\t\tloadingTitle: 'Simple KPI',\t\t\t\n\t\t// Component\n\t\tcomponent:{\n\t\t\tshowTitle: false,\n\t\t\ttitle: 'COMPONENT TITLE - TRENDSERIES',\n\t\t\tgrid: '60px 1fr',\n\t\t\tsummary: {\n\t\t\t\tshow: true,\n\t\t\t\tshowTitle: false,\t\t\t\t\n\t\t\t\ttitle: 'Resumen de TimeSeries',\n\t\t\t\tstyle: {background: 'transparent'},\n\t\t\t\torder: 1\n\t\t\t},\n\t\t\tchart:{\n\t\t\t\tshow: true,\n\t\t\t\tstyle: {background: 'transparent' },\n\t\t\t\torder: 2\n\t\t\t}\t\t\t\t\t\n\t\t},\n\t\ttotal: 0,\t\n\t\ttotalUnit: 'Queries'\n\t},\n\tmethods:{\n\t\tdrawVueComponent: function(newData,oldData){\n\t\t\t\tthis.total = newData[0].total;\t\n\t\t},\n\t\tresizeEvent: function(){\n\t\t\t//Resize event\n\t\t},\n\t\tdestroyVueComponent: function(){\n\t\t\tvm.vueapp.$destroy();\n\t\t},\n\t\treceiveValue: function(data){\n\t\t\t//data received from datalink\n\t\t},\n\t\tsendValue: vm.sendValue,\n\t\tsendFilter: vm.sendFilter,\n\t\tsetComponentLayout (item) {\n\t\t\tif (this.component[item].style && this.component[item].order) {\n\t\t\t\tthis.component[item].style.order = this.component[item].order // add order to style \n\t\t\t\treturn this.component[item].style\n\t\t\t} else {\n\t\t\t\tif (this.component[item].order) { return {order: this.component[item].order} } else { return {} }\n\t\t\t}\n\t\t},\t\t\n\t\tloaded () {\t\t\t\n\t\t\tthis.loading = false\t\t\t\n\t\t}\t\t\n\t},\n\tcomputed:{\t\t\n\t\tsetGridLayout () {\n\t\t\tvar layout = !this.component.summary.show ? { gridTemplateColumns: '1fr!important' } : (this.component.grid && this.component.grid !== '') ? { gridTemplateColumns: this.component.grid + '!important' } : { gridTemplateColumns: '1fr 2fr' }\n\t\t\treturn layout\n\t\t}\t\n\t},\n\tmounted () {\t\t\n\t\tsetTimeout(() => this.loaded(), 3000)\n\t}\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_count_all",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-16",
                "type": "query"
              },
              "x": 19,
              "y": 3,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "source_kpi_error",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1669717827887",
              "customMenuOptions": [],
              "cols": 8
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "total_sources (livehtml)",
              "rows": 14,
              "type": "livehtml",
              "$$hashKey": "object:1051",
              "content": "<!--Focus here and F11 or F10 to full screen editor-->\n<!-- Write your CSS <style></style> here -->\n<style>\n    .gadget-app { height: 100%; width:100%; }\n    .ods-tabs__item { font-size: .95rem !important; } \n</style>\n<div class=\"gadget-app\">\n    <div style=\"height: 100%; padding: 0 1rem;\" data-name=\"ODS_MIXED_CHART\">\n        <div class=\"ods-dataviz__header\"><h2 class=\"ods-dataviz__title\"> Total Queries By Source </h2></div>        \n       \n        <div  style=\"height: 90%;width:100%;\">  \n             <div id=\"barsworksorders001\" style=\"width:100%;height:100%;\"></div>\n        </div>\n        <div v-else style=\"height: 100%; display: flex; justify-content: center; align-items: center\">     \n            <div style=\"height: 100%;display: flex;justify-content: center;align-items: flex-start;\">\n                <div style=\"display: flex;height: auto;flex-direction: column;align-items: center;\">\n                    <div class=\"ods-dataviz__header\">\n                        <h2 class=\"ods-dataviz__title\"></h2>\n                    </div>\n                    <p style=\"margin-bottom: 1rem; margin-top: 55%\">{{ noData }}</p>\n                    <ods-icon name=\"error-alert\" size=\"30\" color=\"#060E14\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
              "nomargin": false,
              "contentcode": "//Write your Vue with ODS JSON controller code here\n\n//Focus here and F11 or F10 to full screen editor\n\n//This function will be call once to init components\n\nvm.vueconfig = {\n\tel: document.getElementById(vm.id).querySelector('vuetemplate  .gadget-app'),\n\tdata: {\n\t\tds: [],\n\t\tnoData: 'No Data Available',\n\n\t\theight: '360px',\n\t\twidth: '100%',\n\t\toption: {},\n\t\tchart: {},\n\t\tshowData: true,\n\n\t\t//switch\n\t\tvalue: 0,\n\t\tdisabled: false,\n\t\tid: 'switch001',\n\t\tlabelText: '',\n\t\tactiveText: 'Only Closed',\n\t\tinactiveText: 'All Work Orders',\n\t\tactiveValue: '100',\n\t\tinactiveValue: '0',\n\t\tactiveColor: '',\n\t\tinactiveColor: '',\n\t\tname: '',\n\t\taccentBlock: false\n\n\n\t},\n\tmethods: {\n\t\tdrawVueComponent: function (newData, oldData) {\n\t\t\tthis.showData = true;\n\t\t\tif (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n\t\t\t\tthis.option.dataset[0].source = [];\n\t\t\t\tfor (var i = 0; i < newData.length; i++) {\n\t\t\t\t\tvar dat = [];\n\t\t\t\t\tdat.push(newData[i].source)\n\t\t\t\t\tdat.push(newData[i].total)\n\t\t\t\t\tthis.option.dataset[0].source.push(dat);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.showData = false;\n\t\t\t\tthis.option.dataset[0].source = [];\n\t\t\t}\n\t\t\tthis.myChart.setOption(this.option);\n\n\t\t\tthis.myChart.resize();\n\n\t\t},\n\t\tresizeEvent: function () {\n\t\t\tthis.myChart.resize()\n\t\t},\n\t\tdestroyVueComponent: function () {\n\t\t\tvar that = this;\n\t\t\twindow.removeEventListener('resize', that.myChart.resize)\n\t\t\tvm.vueapp.$destroy();\n\t\t},\n\t\treceiveValue: function (data) {\n\t\t\t//data received from datalink\n\t\t},\n\t\tsendValue: vm.sendValue,\n\t\tsendFilter: vm.sendFilter,\n\t\thandleChange: function () {\n\t\t\tif (this.value == 0) {\n\t\t\t\tthis.sendFilter('STATUS', null, 'IN');\n\t\t\t} else {\n\t\t\t\tthis.sendFilter('STATUS', \"('CLOSE','CERRADO')\", 'IN');\n\t\t\t}\n\t\t}\n\t},\n\tmounted() {\n\t\tvar chartDom = document.getElementById('barsworksorders001');\n\t\tthis.myChart = echarts.init(chartDom, null, { renderer: 'canvas', useDirtyRect: false });\n\n\t\tthis.option = {\n\n\t\t\ttoolbox: {\n\t\t\t\torient:'vertical',\n\t\t\t\tfeature: {\n\t\t\t\t\tdataZoom: {\n\t\t\t\t\t\tyAxisIndex: 'none'\n\t\t\t\t\t},\n\t\t\t\t\tmagicType: { show: true, type: ['line', 'bar'] },\n\t\t\t\t\tsaveAsImage: {}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttooltip: { trigger: 'item',confine: true, position: 'top' },\n\t\t\tdataset: [{\n\t\t\t\tdimensions: ['source', 'value'],\n\t\t\t\tsource: [\n\n\t\t\t\t]\n\t\t\t}],\n\t\t\txAxis: { type: 'category', axisLabel: { interval: 0, rotate: 30 } },\n\t\t\tyAxis: {},\n\t\t\tgrid: {\n\t\t\t\tcontainLabel: true,\n\t\t\t\ttop: 35, left: 5, bottom: 35, right: 5\n\t\t\t},\n\t\t\tdataZoom: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'inside',\n\t\t\t\t\tthrottle: 20\n\t\t\t\t}\n\t\t\t],\n\t\t\t// Declare several bar series, each will be mapped\n\t\t\t// to a column of dataset.source by default.\n\t\t\tseries: {\n\t\t\t\tname: 'source',\n\t\t\t\ttype: 'bar',\n\t\t\t\tencode: { x: 'source', y: 'value' },\n\t\t\t\tcolor: [\n\n\n\t\t\t\t\t'#6DB6A1',\n\t\t\t\t\t'#E5B75D',\n\t\t\t\t\t'#61B3CB',\n\t\t\t\t\t'#418A8B',\n\t\t\t\t\t'#A2578D',\n\t\t\t\t\t'#3982D0',\n\t\t\t\t\t'#D96D73',\n\t\t\t\t\t'#6DB6A1',\n\t\t\t\t\t'#5A59A6',\n\t\t\t\t\t'#F78B41',\n\t\t\t\t\t''\n\t\t\t\t],\n\t\t\t\tmarkLine: {\n\t\t\t\t\tdata: [{ type: 'average', name: 'Avg' }]\n\t\t\t\t}, markPoint: {\n\t\t\t\t\tdata: [\n\t\t\t\t\t\t{ type: 'max', name: 'Max' },\n\t\t\t\t\t\t{ type: 'min', name: 'Min' }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.option && this.myChart.setOption(this.option);\n\t\tthis.myChart.resize();\n\t\tthis.showData = true;\n\t\tvar that = this;\n\t\twindow.addEventListener('resize', that.myChart.resize);\n\t}\n\t,\n\tcomputed: {\n\n\t}\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_group_source",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-17",
                "type": "query"
              },
              "x": 0,
              "y": 18,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "total_sources",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1669718212452",
              "customMenuOptions": [],
              "cols": 19
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "errors_source (livehtml)",
              "rows": 9,
              "type": "livehtml",
              "$$hashKey": "object:1303",
              "content": "<!--Focus here and F11 or F10 to full screen editor-->\n<!-- Write your CSS <style></style> here -->\n<style>\n    .gadget-app { height: 100%; width:100%; }\n    .ods-tabs__item { font-size: .95rem !important; } \n</style>\n<div class=\"gadget-app\">\n    <div style=\"height: 100%; padding: 0 1rem;\" data-name=\"ODS_MIXED_CHART\">\n        <div class=\"ods-dataviz__header\"><h2 class=\"ods-dataviz__title\"> Comparative Incorrect By Source</h2></div>        \n        \n        <div   style=\"height: 99%;width:100%;\">  \n             <div id=\"barsworksorders002\" style=\"width:100%;height:100%;\"></div>\n        </div>\n        \n        <div v-else style=\"height: 100%; display: flex; justify-content: center; align-items: center\">     \n            <div style=\"height: 100%;display: flex;justify-content: center;align-items: flex-start;\">\n                <div style=\"display: flex;height: auto;flex-direction: column;align-items: center;\">\n                    <div class=\"ods-dataviz__header\">\n                        <h2 class=\"ods-dataviz__title\"></h2>\n                    </div>\n                    <p style=\"margin-bottom: 1rem; margin-top: 55%\">{{ noData }}</p>\n                    <ods-icon name=\"error-alert\" size=\"30\" color=\"#060E14\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
              "nomargin": false,
              "contentcode": "//Write your Vue with ODS JSON controller code here\n\n//Focus here and F11 or F10 to full screen editor\n\n//This function will be call once to init components\n\nvm.vueconfig = {\n\tel: document.getElementById(vm.id).querySelector('vuetemplate  .gadget-app'),\n\tdata: {\n\t\tds: [],\n\t\tnoData: 'No Data Available',\n\n\t\theight: '330px',\n\t\twidth: '100%',\n\t\toption: {},\n\t\tchart: {},\n\t\tshowData: true,\n\n\t\t//switch\n\t\tvalue: 0,\n\t\tdisabled: false,\n\t\tid: 'switch001',\n\t\tlabelText: '',\n\t\tactiveText: 'Only Closed',\n\t\tinactiveText: 'All Work Orders',\n\t\tactiveValue: '100',\n\t\tinactiveValue: '0',\n\t\tactiveColor: '',\n\t\tinactiveColor: '',\n\t\tname: '',\n\t\taccentBlock: false\n\n\n\t},\n\tmethods: {\n\t\tdrawVueComponent: function (newData, oldData) {\n\t\t\tthis.showData = true;\n\t\t\tif (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n\t\t\t\tthis.option.series[0].data = [];\n\n\t\t\t\tvar source = [];\n\t\t\t\tfor (var i = 0; i < newData.length; i++) {\n\n\t\t\t\t\tthis.option.series[0].data.push({\n\t\t\t\t\t\tname: newData[i].source, value: newData[i].total\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.option.series[0].data = []\n\t\t\t\tthis.showData = false;\n\t\t\t}\n\t\t\tthis.myChart.setOption(this.option);\n\t\t\tthis.myChart.resize();\n\t\t},\n\t\tresizeEvent: function () {\n\t\t\tthis.myChart.resize()\n\t\t},\n\t\tdestroyVueComponent: function () {\n\t\t\tvar that = this;\n\t\t\twindow.removeEventListener('resize', that.myChart.resize)\n\t\t\tvm.vueapp.$destroy();\n\t\t},\n\t\treceiveValue: function (data) {\n\t\t\t//data received from datalink\n\t\t},\n\t\tsendValue: vm.sendValue,\n\t\tsendFilter: vm.sendFilter,\n\t\thandleChange: function () {\n\n\t\t}\n\t},\n\tmounted() {\n\t\tvar chartDom = document.getElementById('barsworksorders002');\n\t\tthis.myChart = echarts.init(chartDom, null, { renderer: 'canvas', useDirtyRect: false });\n\n\t\tvar that = this;\n\t\tthis.option = {\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'pie',\n\t\t\t\t\tradius: [20, 60],\n\t\t\t\t\ttop: '0',\n\t\t\t\t\theight: '99%',\n\t\t\t\t\tleft: 'center',\n\t\t\t\t\twidth: 380,\n\t\t\t\t\titemStyle: {\n\t\t\t\t\t\tborderColor: '#fff',\n\t\t\t\t\t\tborderWidth: 1\n\t\t\t\t\t},\n\t\t\t\t\tcolor: [\n\t\t\t\t\t\t'#3982D0',\n\t\t\t\t\t\t'#D96D73',\n\t\t\t\t\t\t'#5A59A6',\n\t\t\t\t\t\t'#6DB6A1',\n\t\t\t\t\t\t'#F78B41',\n\t\t\t\t\t\t'#61B3CB',\n\t\t\t\t\t\t'#418A8B',\n\t\t\t\t\t\t'#A2578D',\n\t\t\t\t\t\t'#E5B75D',\n\t\t\t\t\t\t'#234E63'\n\t\t\t\t\t],\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\talignTo: 'edge',\n\t\t\t\t\t\tformatter: '{name|{b}}\\n{time|{c} Errors ({d}%)}',\n\t\t\t\t\t\tminMargin: 5,\n\t\t\t\t\t\tedgeDistance: 10,\n\t\t\t\t\t\tlineHeight: 15,\n\t\t\t\t\t\trich: {\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\tfontSize: 10,\n\t\t\t\t\t\t\t\tcolor: '#999'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tlabelLine: {\n\t\t\t\t\t\tlength: 10,\n\t\t\t\t\t\tlength2: 0,\n\t\t\t\t\t\tmaxSurfaceAngle: 80\n\t\t\t\t\t},\n\t\t\t\t\tlabelLayout: function (params) {\n\t\t\t\t\t\tconst isLeft = params.labelRect.x < that.myChart.getWidth() / 2;\n\t\t\t\t\t\tconst points = params.labelLinePoints;\n\t\t\t\t\t\t// Update the end point.\n\t\t\t\t\t\tpoints[2][0] = isLeft\n\t\t\t\t\t\t\t? params.labelRect.x\n\t\t\t\t\t\t\t: params.labelRect.x + params.labelRect.width;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlabelLinePoints: points\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\tdata: []\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\n\n\n\n\n\t\tthis.option && this.myChart.setOption(this.option);\n\t\tthis.myChart.resize();\n\t\tthis.showData = true;\n\n\t\twindow.addEventListener('resize', that.myChart.resize);\n\t}\n\t,\n\tcomputed: {\n\n\t}\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_group_source_errors",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-18",
                "type": "query"
              },
              "x": 36,
              "y": 3,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "errors_source",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1669718295193",
              "customMenuOptions": [],
              "cols": 14
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "avg_querytime_by_source (livehtml)",
              "rows": 10,
              "type": "livehtml",
              "$$hashKey": "object:561",
              "content": "<style>\n    .gadget-app { height: 100%; width:100%; }\n    .ods-tabs__item { font-size: .95rem !important; } \n</style>\n<div class=\"gadget-app\">\n    <div style=\"height: 100%; padding: 0 1rem;\" data-name=\"ODS_MIXED_CHART\">\n        <div class=\"ods-dataviz__header\"><h2 class=\"ods-dataviz__title\"> Comparative Avg Query Time By Source</h2></div>        \n        \n        <div  style=\"height: 90%;width:100%;\">  \n             <div id=\"barsworksorders004\" style=\"width:100%;height:100%;\"></div>\n        </div>\n        <div v-else style=\"height: 100%; display: flex; justify-content: center; align-items: center\">     \n            <div style=\"height: 100%;display: flex;justify-content: center;align-items: flex-start;\">\n                <div style=\"display: flex;height: auto;flex-direction: column;align-items: center;\">\n                    <div class=\"ods-dataviz__header\">\n                        <h2 class=\"ods-dataviz__title\"></h2>\n                    </div>\n                    <p style=\"margin-bottom: 1rem; margin-top: 55%\">{{ noData }}</p>\n                    <ods-icon name=\"error-alert\" size=\"30\" color=\"#060E14\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
              "nomargin": false,
              "contentcode": "\nvm.vueconfig = {\n\tel: document.getElementById(vm.id).querySelector('vuetemplate  .gadget-app'),\n\tdata: {\n\t\tds: [],\n\t\tnoData: 'No Data Available',\n\n\t\theight: '360px',\n\t\twidth: '100%',\n\t\toption: {},\n\t\tchart: {},\n\t\tshowData: true,\n\n\t\t//switch\n\t\tvalue: 0,\n\t\tdisabled: false,\n\t\tid: 'switch001',\n\t\tlabelText: '',\n\t\tactiveText: 'Only Closed',\n\t\tinactiveText: 'All Work Orders',\n\t\tactiveValue: '100',\n\t\tinactiveValue: '0',\n\t\tactiveColor: '',\n\t\tinactiveColor: '',\n\t\tname: '',\n\t\taccentBlock: false\n\n\n\t},\n\tmethods: {\n\t\tdrawVueComponent: function (newData, oldData) {\n\t\t\tthis.showData = true;\n\t\t\tif (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n\t\t\t\tthis.option.series[0].data = [];\t\t\t \n\t\t\t\tvar source = [];\n\t\t\t\tfor (var i = 0; i < newData.length; i++) {\n\t\t\t\t \n\t\t\t\t\tthis.option.series[0].data.push({\n\t\t\t\t\t\tname: newData[i].source, value: Math.round((newData[i].average + Number.EPSILON) * 100) / 100\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.showData = false;\n\t\t\t\t\tthis.option.series[0].data = [];\n\t\t\t}\n\t\t\tthis.myChart.setOption(this.option);\n\t\t\tthis.myChart.resize();\n\t\t},\n\t\tresizeEvent: function () {\n\t\t\tthis.myChart.resize()\n\t\t},\n\t\tdestroyVueComponent: function () {\n\t\t\tvar that = this;\n\t\t\twindow.removeEventListener('resize', that.myChart.resize)\n\t\t\tvm.vueapp.$destroy();\n\t\t},\n\t\treceiveValue: function (data) {\n\t\t\t//data received from datalink\n\t\t},\n\t\tsendValue: vm.sendValue,\n\t\tsendFilter: vm.sendFilter,\n\t\thandleChange: function () {\n\n\t\t}\n\t},\n\tmounted() {\n\t\tvar chartDom = document.getElementById('barsworksorders004');\n\t\tthis.myChart = echarts.init(chartDom, null, { renderer: 'canvas', useDirtyRect: false });\n\tvar that = this;\n\t\tthis.option = {\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t   type: 'pie',\n      radius: [20, 60],\n      top: '10%',\n      height: '90%',\n      left: 'center',\n      width: 330,\n      itemStyle: {\n        borderColor: '#fff',\n        borderWidth: 1\n      },\n\t\t\tcolor: [\n\t\t\t'#3982D0',\n\t\t\t'#D96D73',\n\t\t\t'#5A59A6',\n\t\t\t'#6DB6A1',\n\t\t\t'#F78B41',\n\t\t\t'#61B3CB',\n\t\t\t'#418A8B',\n\t\t\t'#A2578D',\n\t\t\t'#E5B75D',\n\t\t\t'#234E63'\n\t\t],\n      label: {\n        alignTo: 'edge',\n        formatter: '{name|{b}}\\n{time|{c} ms}',\n        minMargin: 5,\n        edgeDistance: 10,\n        lineHeight: 15,\n        rich: {\n          time: {\n            fontSize: 10,\n            color: '#999'\n          }\n        }\n      },\n      labelLine: {\n        length: 15,\n        length2: 0,\n        maxSurfaceAngle: 80\n      },\n      labelLayout: function (params) {\n        const isLeft = params.labelRect.x < that.myChart.getWidth() / 2;\n        const points = params.labelLinePoints;\n        // Update the end point.\n        points[2][0] = isLeft\n          ? params.labelRect.x\n          : params.labelRect.x + params.labelRect.width;\n        return {\n          labelLinePoints: points\n        };\n      },\n      data: []\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\n\t\tthis.option && this.myChart.setOption(this.option);\n\t\tthis.myChart.resize();\n\t\tthis.showData = true;\n\t\n\t\twindow.addEventListener('resize', that.myChart.resize);\n\t}\n\t,\n\tcomputed: {\n\n\t}\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_avg_queryTime_source",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-19",
                "type": "query"
              },
              "x": 36,
              "y": 22,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "avg_querytime_by_source",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1669718717969",
              "customMenuOptions": [],
              "cols": 14
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "total_queries_users (livehtml)",
              "rows": 14,
              "type": "livehtml",
              "$$hashKey": "object:566",
              "content": "\n<div class=\"gadget-app\">\n    <div style=\"height: 100%; padding: 0 1rem;\" data-name=\"ODS_MIXED_CHART\">\n        <div class=\"ods-dataviz__header\"><h2 class=\"ods-dataviz__title\"> Total Queries By User </h2></div>        \n        <!-- <ods-switch\n            v-model=\"value\"\n            :disabled=\"disabled\"\n            :active-text=\"activeText\"\n            :inactive-text=\"inactiveText\"\n            :active-value=\"activeValue\"\n            :inactive-value=\"inactiveValue\"\n            :active-color=\"activeColor\"\n            :inactive-color=\"inactiveColor\"\n            :name=\"name\"\n            :label-text=\"labelText\"\n            :id=\"id\"\n            @change=\"handleChange\"\n            >\n        </ods-switch>-->\n        <div  style=\"height: 90%;width:100%;\">  \n             <div id=\"barsworksorders005\" style=\"width:100%;height:100%;\"></div>\n        </div>\n        <div v-else style=\"height: 100%; display: flex; justify-content: center; align-items: center\">     \n            <div style=\"height: 100%;display: flex;justify-content: center;align-items: flex-start;\">\n                <div style=\"display: flex;height: auto;flex-direction: column;align-items: center;\">\n                    <div class=\"ods-dataviz__header\">\n                        <h2 class=\"ods-dataviz__title\"></h2>\n                    </div>\n                    <p style=\"margin-bottom: 1rem; margin-top: 55%\">{{ noData }}</p>\n                    <ods-icon name=\"error-alert\" size=\"30\" color=\"#060E14\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
              "nomargin": false,
              "contentcode": "\nvm.vueconfig = {\n\tel: document.getElementById(vm.id).querySelector('vuetemplate  .gadget-app'),\n\tdata: {\n\t\tds: [],\n\t\tnoData: 'No Data Available',\n\n\t\theight: '360px',\n\t\twidth: '100%',\n\t\toption: {},\n\t\tchart: {},\n\t\tshowData: true,\n\n\t\t//switch\n\t\tvalue: 0,\n\t\tdisabled: false,\n\t\tid: 'switch001',\n\t\tlabelText: '',\n\t\tactiveText: 'Only Closed',\n\t\tinactiveText: 'All Work Orders',\n\t\tactiveValue: '100',\n\t\tinactiveValue: '0',\n\t\tactiveColor: '',\n\t\tinactiveColor: '',\n\t\tname: '',\n\t\taccentBlock: false\n\n\n\t},\n\tmethods: {\n\t\tdrawVueComponent: function (newData, oldData) {\n\t\t\tthis.showData = true;\n\t\t\tif (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n\t\t\t\tthis.option.dataset[0].source = [];\n\t\t\t\tfor (var i = 0; i < newData.length; i++) {\n\t\t\t\t\tvar dat = [];\n\t\t\t\t\tdat.push(newData[i].user)\n\t\t\t\t\tdat.push(newData[i].total)\n\t\t\t\t\tthis.option.dataset[0].source.push(dat);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.showData = false;\n\t\t\t\tthis.option.dataset[0].source = [];\n\t\t\t}\n\t\t\tthis.myChart.setOption(this.option);\n\n\t\t\tthis.myChart.resize();\n\n\t\t},\n\t\tresizeEvent: function () {\n\t\t\tthis.myChart.resize()\n\t\t},\n\t\tdestroyVueComponent: function () {\n\t\t\tvar that = this;\n\t\t\twindow.removeEventListener('resize', that.myChart.resize)\n\t\t\tvm.vueapp.$destroy();\n\t\t},\n\t\treceiveValue: function (data) {\n\t\t\t//data received from datalink\n\t\t},\n\t\tsendValue: vm.sendValue,\n\t\tsendFilter: vm.sendFilter,\n\t\thandleChange: function () {\n\t\t\tif (this.value == 0) {\n\t\t\t\tthis.sendFilter('STATUS', null, 'IN');\n\t\t\t} else {\n\t\t\t\tthis.sendFilter('STATUS', \"('CLOSE','CERRADO')\", 'IN');\n\t\t\t}\n\t\t}\n\t},\n\tmounted() {\n\t\tvar chartDom = document.getElementById('barsworksorders005');\n\t\tthis.myChart = echarts.init(chartDom, null, { renderer: 'canvas', useDirtyRect: false });\n\n\t\tthis.option = {\n\n\t\t\ttoolbox: {\n\t\t\t\torient: 'vertical',\n\t\t\t\tfeature: {\n\t\t\t\t\tdataZoom: {\n\t\t\t\t\t\tyAxisIndex: 'none'\n\t\t\t\t\t},\n\t\t\t\t\tmagicType: { show: true, type: ['line', 'bar'] },\n\t\t\t\t\tsaveAsImage: {}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttooltip: { trigger: 'item',confine: true, position: 'top' },\n\t\t\tdataset: [{\n\t\t\t\tdimensions: ['user', 'value'],\n\t\t\t\tsource: [\n\n\t\t\t\t]\n\t\t\t}, {\n\t\t\t\ttransform: {\n\t\t\t\t\ttype: 'sort',\n\t\t\t\t\tconfig: { dimension: 'user', order: 'desc' }\n\t\t\t\t}\n\t\t\t}],\n\t\t\txAxis: { type: 'category', axisLabel: { interval: 0, rotate: 30 } },\n\t\t\tyAxis: {},\n\t\t\tgrid: {\n\t\t\t\tcontainLabel: true,\n\t\t\t\ttop: 35, left: 5, bottom: 35, right: 5\n\t\t\t}, dataZoom: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'inside',\n\t\t\t\t\tthrottle: 20\n\t\t\t\t}\n\t\t\t],\n\t\t\t// Declare several bar series, each will be mapped\n\t\t\t// to a column of dataset.source by default.\n\t\t\tseries: {\n\t\t\t\tname: 'user',\n\t\t\t\ttype: 'bar',\n\t\t\t\tencode: { x: 'user', y: 'value' },\n\t\t\t\tcolor: [\n\n\n\t\t\t\t\t'#3982D0',\n\t\t\t\t\t'#E5B75D',\n\t\t\t\t\t'#61B3CB',\n\t\t\t\t\t'#418A8B',\n\t\t\t\t\t'#A2578D',\n\t\t\t\t\t'#3982D0',\n\t\t\t\t\t'#D96D73',\n\t\t\t\t\t'#6DB6A1',\n\t\t\t\t\t'#5A59A6',\n\t\t\t\t\t'#F78B41',\n\t\t\t\t\t''\n\t\t\t\t],\n\t\t\t\tmarkLine: {\n\t\t\t\t\tdata: [{ type: 'average', name: 'Avg' }]\n\t\t\t\t}, markPoint: {\n\t\t\t\t\tdata: [\n\t\t\t\t\t\t{ type: 'max', name: 'Max' },\n\t\t\t\t\t\t{ type: 'min', name: 'Min' }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.option && this.myChart.setOption(this.option);\n\t\tthis.myChart.resize();\n\t\tthis.showData = true;\n\t\tvar that = this;\n\t\twindow.addEventListener('resize', that.myChart.resize);\n\t}\n\t,\n\tcomputed: {\n\n\t}\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_mostactiveusers",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-20",
                "type": "query"
              },
              "x": 19,
              "y": 18,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "total_queries_users",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1669734374016",
              "customMenuOptions": [],
              "cols": 17
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "total_errors_users (livehtml)",
              "rows": 10,
              "type": "livehtml",
              "$$hashKey": "object:410",
              "content": "<style>\n    .gadget-app { height: 100%; width:100%; }\n    .ods-tabs__item { font-size: .95rem !important; } \n</style>\n<div class=\"gadget-app\">\n    <div style=\"height: 100%; padding: 0 1rem;\" data-name=\"ODS_MIXED_CHART\">\n        <div class=\"ods-dataviz__header\"><h2 class=\"ods-dataviz__title\"> Total Errors By Users</h2></div>        \n        \n        <div  style=\"height: 90%;width:100%;\">  \n             <div id=\"barsworksorders007\" style=\"width:100%;height:100%;\"></div>\n        </div>\n        <div v-else style=\"height: 100%; display: flex; justify-content: center; align-items: center\">     \n            <div style=\"height: 100%;display: flex;justify-content: center;align-items: flex-start;\">\n                <div style=\"display: flex;height: auto;flex-direction: column;align-items: center;\">\n                    <div class=\"ods-dataviz__header\">\n                        <h2 class=\"ods-dataviz__title\"></h2>\n                    </div>\n                    <p style=\"margin-bottom: 1rem; margin-top: 55%\">{{ noData }}</p>\n                    <ods-icon name=\"error-alert\" size=\"30\" color=\"#060E14\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
              "nomargin": false,
              "contentcode": "\nvm.vueconfig = {\n\tel: document.getElementById(vm.id).querySelector('vuetemplate  .gadget-app'),\n\tdata: {\n\t\tds: [],\n\t\tnoData: 'No Data Available',\n\n\t\theight: '360px',\n\t\twidth: '100%',\n\t\toption: {},\n\t\tchart: {},\n\t\tshowData: true,\n\n\t\t//switch\n\t\tvalue: 0,\n\t\tdisabled: false,\n\t\tid: 'switch001',\n\t\tlabelText: '',\n\t\tactiveText: 'Only Closed',\n\t\tinactiveText: 'All Work Orders',\n\t\tactiveValue: '100',\n\t\tinactiveValue: '0',\n\t\tactiveColor: '',\n\t\tinactiveColor: '',\n\t\tname: '',\n\t\taccentBlock: false\n\n\n\t},\n\tmethods: {\n\t\tdrawVueComponent: function (newData, oldData) {\n\t\t\tthis.showData = true;\n\t\t\tif (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n\t\t\t\tthis.option.series[0].data = [];\n\t\t\t\tvar source = [];\n\t\t\t\tfor (var i = 0; i < newData.length; i++) {\n\n\t\t\t\t\tthis.option.series[0].data.push({\n\t\t\t\t\t\tname: newData[i].user, value: Math.round((newData[i].total + Number.EPSILON) * 100) / 100\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.showData = false;\n\t\t\t\tthis.option.series[0].data = [];\n\t\t\t}\n\t\t\tthis.myChart.setOption(this.option);\n\t\t\tthis.myChart.resize();\n\t\t},\n\t\tresizeEvent: function () {\n\t\t\tthis.myChart.resize()\n\t\t},\n\t\tdestroyVueComponent: function () {\n\t\t\tvar that = this;\n\t\t\twindow.removeEventListener('resize', that.myChart.resize)\n\t\t\tvm.vueapp.$destroy();\n\t\t},\n\t\treceiveValue: function (data) {\n\t\t\t//data received from datalink\n\t\t},\n\t\tsendValue: vm.sendValue,\n\t\tsendFilter: vm.sendFilter,\n\t\thandleChange: function () {\n\n\t\t}\n\t},\n\tmounted() {\n\t\tvar chartDom = document.getElementById('barsworksorders007');\n\t\tthis.myChart = echarts.init(chartDom, null, { renderer: 'canvas', useDirtyRect: false });\n\t\tvar that = this;\n\t\tthis.option = {\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'pie',\n\t\t\t\t\tradius: [20, 60],\n\t\t\t\t\ttop: '10%',\n\t\t\t\t\theight: '90%',\n\t\t\t\t\tleft: 'center',\n\t\t\t\t\twidth: 330,\n\t\t\t\t\titemStyle: {\n\t\t\t\t\t\tborderColor: '#fff',\n\t\t\t\t\t\tborderWidth: 1\n\t\t\t\t\t},\n\t\t\t\t\tcolor: [\n\t\t\t\t\t\t'#3982D0',\n\t\t\t\t\t\t'#D96D73',\n\t\t\t\t\t\t'#5A59A6',\n\t\t\t\t\t\t'#6DB6A1',\n\t\t\t\t\t\t'#F78B41',\n\t\t\t\t\t\t'#61B3CB',\n\t\t\t\t\t\t'#418A8B',\n\t\t\t\t\t\t'#A2578D',\n\t\t\t\t\t\t'#E5B75D',\n\t\t\t\t\t\t'#234E63'\n\t\t\t\t\t],\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\talignTo: 'edge',\n\t\t\t\t\t\tformatter: '{name|{b}}\\n{time|{c} Errors}',\n\t\t\t\t\t\tminMargin: 5,\n\t\t\t\t\t\tedgeDistance: 10,\n\t\t\t\t\t\tlineHeight: 15,\n\t\t\t\t\t\trich: {\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\tfontSize: 10,\n\t\t\t\t\t\t\t\tcolor: '#999'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tlabelLine: {\n\t\t\t\t\t\tlength: 15,\n\t\t\t\t\t\tlength2: 0,\n\t\t\t\t\t\tmaxSurfaceAngle: 80\n\t\t\t\t\t},\n\t\t\t\t\tlabelLayout: function (params) {\n\t\t\t\t\t\tconst isLeft = params.labelRect.x < that.myChart.getWidth() / 2;\n\t\t\t\t\t\tconst points = params.labelLinePoints;\n\t\t\t\t\t\t// Update the end point.\n\t\t\t\t\t\tpoints[2][0] = isLeft\n\t\t\t\t\t\t\t? params.labelRect.x\n\t\t\t\t\t\t\t: params.labelRect.x + params.labelRect.width;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlabelLinePoints: points\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\tdata: []\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\n\t\tthis.option && this.myChart.setOption(this.option);\n\t\tthis.myChart.resize();\n\t\tthis.showData = true;\n\n\t\twindow.addEventListener('resize', that.myChart.resize);\n\t}\n\t,\n\tcomputed: {\n\n\t}\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_total_users_errors",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-21",
                "type": "query"
              },
              "x": 36,
              "y": 12,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "total_errors_users",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1669735509295",
              "customMenuOptions": [],
              "cols": 14
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "querysbytime (livehtml)",
              "rows": 12,
              "type": "livehtml",
              "$$hashKey": "object:598",
              "content": "<!--Focus here and F11 or F10 to full screen editor-->\n<!-- Write your CSS <style></style> here -->\n<style>\n    .gadget-app { height: 100%; width:100%; }\n    .ods-tabs__item { font-size: .95rem !important; } \n     .btn-chart {\n      display: inline-block;\n      font-weight: 400;\n      line-height: 1.5;\n      color: #495057;\n      text-align: center;\n      vertical-align: middle;\n      cursor: pointer;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n      background-color: transparent;\n      border: 1px solid transparent;\n      padding: 0.47rem 0.75rem;\n      font-size: .8125rem;\n      border-radius: 0.25rem;\n      transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n    }\n .button-items {\n      margin-left: -8px;\n      margin-bottom: -12px;\n    }\n</style>\n<div class=\"gadget-app\">\n    <div style=\"height: 100%; padding: 0 1rem;\" data-name=\"ODS_MIXED_CHART\">\n        <div class=\"ods-dataviz__header\"><h2 class=\"ods-dataviz__title\"> Total Queries</h2></div>        \n        <!-- <ods-switch\n            v-model=\"value\"\n            :disabled=\"disabled\"\n            :active-text=\"activeText\"\n            :inactive-text=\"inactiveText\"\n            :active-value=\"activeValue\"\n            :inactive-value=\"inactiveValue\"\n            :active-color=\"activeColor\"\n            :inactive-color=\"inactiveColor\"\n            :name=\"name\"\n            :label-text=\"labelText\"\n            :id=\"id\"\n            @change=\"handleChange\"\n            >\n        </ods-switch>-->\n        <div  style=\"height: 90%;width:100%;\">  \n            <el-button-group>\n             <el-button type=\"button\" class=\"btn-chart btn-light btn-sm\" @click=\"timeSeries('D',1)\"> 1D </el-button>\n              <el-button type=\"button\" class=\"btn-chart btn-light btn-sm active\" @click=\"timeSeries('D',30)\"> 30D </el-button>\n              <el-button type=\"button\" class=\"btn-chart btn-light btn-sm\" @click=\"timeSeries('D',60)\"> 60D </el-button>\n              <el-button type=\"button\" class=\"btn-chart btn-light btn-sm\" @click=\"timeSeries('M',3)\"> 3M </el-button>\n              </el-button-group>\n             <div id=\"barsworksorders010\" style=\"width:100%;height:100%;\"></div>\n        </div>\n        <div v-else style=\"height: 100%; display: flex; justify-content: center; align-items: center\">     \n            <div style=\"height: 100%;display: flex;justify-content: center;align-items: flex-start;\">\n                <div style=\"display: flex;height: auto;flex-direction: column;align-items: center;\">\n                    <div class=\"ods-dataviz__header\">\n                        <h2 class=\"ods-dataviz__title\"></h2>\n                    </div>\n                    <p style=\"margin-bottom: 1rem; margin-top: 55%\">{{ noData }}</p>\n                    <ods-icon name=\"error-alert\" size=\"30\" color=\"#060E14\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
              "nomargin": false,
              "contentcode": "//Write your Vue with ODS JSON controller code here\n\n//Focus here and F11 or F10 to full screen editor\n\n//This function will be call once to init components\n\nvm.vueconfig = {\n\tel: document.getElementById(vm.id).querySelector('vuetemplate  .gadget-app'),\n\tdata: {\n\t\tds: [],\n\t\tnoData: 'No Data Available',\n\n\t\theight: '360px',\n\t\twidth: '100%',\n\t\t//option: {},\n\t\tchart: {},\n\t\tshowData: true,\n\n\t\t//switch\n\t\tvalue: 0,\n\t\tdisabled: false,\n\t\tid: 'switch001',\n\t\tlabelText: '',\n\t\tactiveText: 'Only Closed',\n\t\tinactiveText: 'All Work Orders',\n\t\tactiveValue: '100',\n\t\tinactiveValue: '0',\n\t\tactiveColor: '',\n\t\tinactiveColor: '',\n\t\tname: '',\n\t\taccentBlock: false,\n\t\ttimeSerie: {\n\t\t\t// TEMPORAL MAIN DATA SERIES CONF.\n\t\t\tdataKey: 'startTime',\n\t\t\tinitFormat: 'x',\n\t\t\tendFormat: 'YYYYMMDDHH',\n\t\t\tdefaultType: 'D',\n\t\t\tdefaultRange: 60,\n\t\t\tminDate: 0,\n\t\t\tmaxDate: 0,\n\t\t\tdefaultData: [],\n\t\t\trangeType: 'PAST', // [PAST,CURRENT,INIT] -> (PAST) 3M: 3 months ago from now. , (CURRENT) 3M: 3 months from current month to future, (INIT) 3M: 3 months from January from current YEAR\n\t\t\tlimit: 2000,\n\t\t\tlocale: 'es',\n\t\t\tseries: [\n\t\t\t\t{ id: 'user', name: 'Nº queries', yaxis: 'N', values: [], operation: 'count' }\n\n\t\t\t],\n\t\t\tkpis: [\n\t\t\t\t{ id: 0, label: 'Today', date: 'today', op: '=', dynamicDate: true, operation: 'sum', percent: true },\n\t\t\t\t{ id: 1, label: 'This Month', date: 'thisMonth', op: '=', dynamicDate: true, operation: 'sum', percent: true },\n\t\t\t\t{ id: 2, label: 'This Year', date: 'thisYear', op: '=', dynamicDate: true, operation: 'sum', percent: true },\n\t\t\t]\n\t\t}, chartData: {\n\t\t\txAxis: [],\n\t\t\tlines: []\n\t\t}, source: [],\n\t\ttypeSerie: \"line\"\n\n\t},\n\tmethods: {\n\t\tdrawVueComponent: function (newData, oldData) {\n\t\t\tthis.showData = true;\n\t\t\tthis.ds = newData.length > 0 ? this.timeSerieSetup(newData) : []\n\n\n\t\t\tif (newData.length == 0) {\n\t\t\t\tthis.source = []\n\t\t\t\tthis.showData = false\n\t\t\t\tthis.myChart.setOption(this.option);\n\t\t\t\tthis.myChart.resize();\n\t\t\t} else {\n\t\t\t\tthis.timeSeries(this.timeSerie.defaultType, this.timeSerie.defaultRange)\n\t\t\t}\n\n\t\t},\n\t\tresizeEvent: function () {\n\t\t\tthis.myChart.resize()\n\t\t},\n\t\tdestroyVueComponent: function () {\n\t\t\tvar that = this;\n\t\t\twindow.removeEventListener('resize', that.myChart.resize)\n\t\t\tvm.vueapp.$destroy();\n\t\t},\n\t\treceiveValue: function (data) {\n\t\t\t//data received from datalink\n\t\t},\n\t\tsendValue: vm.sendValue,\n\t\tsendFilter: vm.sendFilter,\n\t\thandleChange: function () {\n\t\t\tif (this.value == 0) {\n\t\t\t\tthis.sendFilter('STATUS', null, 'IN');\n\t\t\t} else {\n\t\t\t\tthis.sendFilter('STATUS', \"('CLOSE','CERRADO')\", 'IN');\n\t\t\t}\n\t\t},\n\t\ttimeSerieSetup(data, field) {\n\t\t\tif (data.length === 0) { return [] }\n\t\t\t// este ejemplo tiene un campo muy raro, pero lo normal sería pasar el field y substituir el x.VEGA2_ALARMS.alarmgroup.split(\"_\")[1]\n\t\t\tvar data = data.map(x => ({ ...x, date: parseInt(moment(x[this.timeSerie.dataKey], this.timeSerie.initFormat).format(this.timeSerie.endFormat)), year: parseInt(moment(x[this.timeSerie.dataKey], this.timeSerie.initFormat).format('YYYY')), month: parseInt(moment(x[this.timeSerie.dataKey], this.timeSerie.initFormat).format('YYYYMM')), day: parseInt(moment(x[this.timeSerie.dataKey], this.timeSerie.initFormat).format('YYYYMMDD')), hour: parseInt(moment(x[this.timeSerie.dataKey], this.timeSerie.initFormat).format('YYYYMMDDHH')) })).filter((x, i) => { if (i <= (this.timeSerie.limit - 1)) { return true } })\n\n\t\t\tthis.timeSerie.defaultData = data\n\n\t\t\t// get start and end periodees by type\n\t\t\tvar moments = this.timeSerie.defaultData.map(d => moment(d.day, 'YYYYMMDD'))\n\t\t\tthis.timeSerie.minDate = moment.min(moments)\n\t\t\tthis.timeSerie.maxDate = moment.max(moments)\n\n\t\t\treturn data\n\t\t}, timeSeries(type, range) {\n\t\t\tconsole.log('Time Series: ', type, ' Range: ', range)\n\t\t\tif (!type) { type = this.timeSerie.defaultType }\n\t\t\tif (this.timeSerie.defaultData.length === 0) { this.ds.length = 0; return false; }\n\n\t\t\t// init timeSerie series data\n\t\t\tfor (let i = 0; i < this.timeSerie.series.length; i++) { this.timeSerie.series[i].values.length = 0 }\n\n\t\t\t// switch type\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Y':\n\t\t\t\t\tconsole.log('TIMESERIE FOR YEARS')\n\t\t\t\t\tthis.ds = this.handleDataTimeSerie('Y', range)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'M':\n\t\t\t\t\tconsole.log('TIMESERIE FOR MONTHS')\n\t\t\t\t\tthis.ds = this.handleDataTimeSerie('M', range)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'D':\n\t\t\t\t\tconsole.log('TIMESERIE FOR DAYS')\n\t\t\t\t\tthis.ds = this.handleDataTimeSerie('D', range)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'H':\n\t\t\t\t\tconsole.log('TIMESERIE FOR HOURS')\n\t\t\t\t\tthis.ds = this.handleDataTimeSerie('H', range)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'ALL':\n\t\t\t\t\tthis.ds = this.timeSerie.defaultType === 'Y' ? this.handleDataTimeSerie('Y', this.timeSerie.defaultRange) : this.timeSerie.defaultType === 'M' ? this.handleDataTimeSerie('M', this.timeSerie.defaultRange) : this.timeSerie.defaultType === 'D' ? this.handleDataTimeSerie('D', this.timeSerie.defaultRange) : this.timeSerie.defaultType === 'H' ? this.handleDataTimeSerie('H', this.timeSerie.defaultRange) : []\n\t\t\t}\n\t\t\tif (typeof this.chartData.xAxis !== 'undefined' && this.chartData.xAxis != null && this.chartData.xAxis.length > 0 && this.showData) {\n\t\t\t\tthis.source = [];\n\n\t\t\t\tfor (var i = 0; i < this.chartData.xAxis.length; i++) {\n\t\t\t\t\tvar dat = [];\n\t\t\t\t\tdat.push(this.chartData.xAxis[i])\n\t\t\t\t\tdat.push(this.chartData.lines[0].values[i])\n\t\t\t\t\tthis.source.push(dat);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.showData = false;\n\t\t\t\tthis.source = [];\n\t\t\t}\n\t\t\tthis.myChart.setOption(this.option);\n\n\t\t\tthis.myChart.resize();\n\n\t\t},\n\t\t// HANDLE AND PRODUCE DATA FOR EACH TYPE\n\t\t// HANDLE GENERIC\n\t\thandleDataTimeSerie(type, range) {\n\n\t\t\tvar series = this.timeSerie.series\n\t\t\tvar data = this.timeSerie.defaultData\n\t\t\tvar AXIS = type === 'Y' ? this.generateYears() : type === 'M' ? this.generateMonths() : type === 'D' ? this.generateDays() : type === 'H' ? this.generateHours() : []\n\t\t\tvar dateField = type === 'Y' ? 'year' : type === 'M' ? 'month' : type === 'D' ? 'day' : type === 'H' ? 'hour' : ''\n\t\t\tif (range && typeof range === 'number') { AXIS = AXIS.slice(-range) }\n\t\t\tthis.axis = AXIS\n\n\t\t\t// FOR AXIS AND SERIES\n\t\t\tfor (let i = 0; i < AXIS.length; i++) {\n\t\t\t\tfor (let y = 0; y < series.length; y++) {\n\t\t\t\t\tvar operation = series[y].operation\n\t\t\t\t\tvar field = series[y].id\n\n\t\t\t\t\t// OPERATIONS\n\t\t\t\t\t// SUM\n\t\t\t\t\tif (operation.toUpperCase() === 'SUM') {\n\t\t\t\t\t\tif (data.filter(x => x[dateField] === parseInt(AXIS[i])).length > 0) {\n\t\t\t\t\t\t\tseries[y].values.push(data.filter(x => x[dateField] === parseInt(AXIS[i])).map(y => y[field]).reduce((x, y) => x + y, 0))\n\t\t\t\t\t\t} else { series[y].values.push(0) }\n\t\t\t\t\t} else if (operation.toUpperCase() === 'PERCENT') {\n\t\t\t\t\t\t// PERCENT\n\t\t\t\t\t\tvar total = data.map(y => y[field]).reduce((x, y) => x + y, 0)\n\t\t\t\t\t\tif (data.filter(x => x[dateField] === parseInt(AXIS[i])).length > 0) {\n\t\t\t\t\t\t\tseries[y].values.push(total > 0 ? Number(((data.filter(x => x[dateField] === parseInt(AXIS[i])).map(y => y[field]).reduce((x, y) => x + y, 0) * 100) / total).toFixed(2)) : 0)\n\t\t\t\t\t\t} else { series[y].values.push(0) }\n\t\t\t\t\t} else if (operation.toUpperCase() === 'COUNT') {\n\t\t\t\t\t\t// AVG\n\t\t\t\t\t\tif (data.filter(x => x[dateField] === parseInt(AXIS[i])).length > 0) {\n\t\t\t\t\t\t\tseries[y].values.push(data.filter(x => x[dateField] === parseInt(AXIS[i])).length)\n\t\t\t\t\t\t} else { series[y].values.push(0) }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add all data to lines\n\t\t\tvar allData = []\n\t\t\tfor (let z = 0; z < series.length; z++) {\n\t\t\t\t// MAX AND MIN for INTERVALS\n\t\t\t\tseries[z].max = Math.max(...series[z].values)\n\t\t\t\tseries[z].min = Math.min(...series[z].values)\n\t\t\t\tseries[z].total = series[z].values.reduce((a, b) => a + b, 0)\n\t\t\t\tallData.push({ name: series[z].name, values: series[z].values, max: series[z].max, min: series[z].min, total: series[z].total })\n\t\t\t}\n\t\t\tconsole.log('ALL DATA: ', allData)\n\t\t\tthis.allData = allData\n\n\t\t\t// APPLY CHART\n\t\t\t// apply time format to AXIS\n\t\t\tAXIS = this.axisFormatter(AXIS, type)\n\t\t\tthis.chartData.xAxis = AXIS // to-do: apply formatter to view correct tags in chart.\n\t\t\tthis.chartData.lines = this.allData\n\t\t},\n\t\t// GENERATE ARRAY OF MONTHS\n\t\tgenerateMonths(format) {\n\t\t\tif (!format) { format = 'YYYYMM' }\n\t\t\tconst months = []\n\t\t\tvar dateStart = moment(this.timeSerie.minDate.format(format), format)\n\t\t\tvar dateEnd = moment(this.timeSerie.maxDate.format(format), format)\n\t\t\twhile (dateEnd.diff(dateStart, 'months') >= 0) {\n\t\t\t\tmonths.push(dateStart.format(format))\n\t\t\t\tdateStart.add(1, 'month')\n\t\t\t}\n\t\t\tconsole.log('Months: ', months)\n\t\t\treturn months\n\t\t},\n\n\t\t// GENERATE ARRAY OF YEARS\n\t\tgenerateYears(format) {\n\t\t\tif (!format) { format = 'YYYY' }\n\t\t\tconst years = []\n\t\t\tvar dateStart = moment(this.timeSerie.minDate.format(format), format)\n\t\t\tvar dateEnd = moment(this.timeSerie.maxDate.format(format), format)\n\t\t\twhile (dateEnd.diff(dateStart, 'years') >= 0) {\n\t\t\t\tyears.push(dateStart.format(format))\n\t\t\t\tdateStart.add(1, 'year')\n\t\t\t}\n\t\t\tconsole.log('Years: ', years)\n\t\t\tthis.test = years\n\t\t\treturn years\n\t\t},\n\n\t\t// GENERATE ARRAY OF DAYS\n\t\tgenerateDays(format) {\n\t\t\tif (!format) { format = 'YYYYMMDD' }\n\t\t\tconst days = []\n\t\t\tvar dateStart = moment(this.timeSerie.minDate.format(format), format)\n\t\t\tvar dateEnd = moment(this.timeSerie.maxDate.format(format), format)\n\t\t\twhile (dateEnd.diff(dateStart, 'days') >= 0) {\n\t\t\t\tdays.push(dateStart.format(format))\n\t\t\t\tdateStart.add(1, 'day')\n\t\t\t}\n\t\t\tconsole.log('Days: ', days)\n\t\t\treturn days\n\t\t},\n\t\t// TIME FORMATTER for AXIS \n\t\taxisFormatter(data, type) {\n\t\t\tmoment.locale(this.timeSerie.locale || 'en')\n\t\t\tvar formattedData = data || []\n\t\t\tvar currentYear = moment().year()\n\t\t\tif (data.length === 0) { return data }\n\t\t\t// making format\n\t\t\tvar yearF = 'YYYY'\n\t\t\tvar monthFY = 'MMM YY'\n\t\t\tvar monthF = 'MMM'\n\t\t\tvar dayFY = 'DD MM YY'\n\t\t\tvar dayF = 'DDD DD MM'\n\t\t\tvar hour = 'HH'\n\t\t\tvar formattedData = data.map(function (item) {\n\t\t\t\tif (type === 'Y') {\n\t\t\t\t\treturn item\n\t\t\t\t} else if (type === 'M') {\n\t\t\t\t\tif (currentYear === moment(item, 'YYYYMM').year()) { return moment(item, 'YYYYMM').format('MMM') } else { return moment(item, 'YYYYMM').format('MMM YY') }\n\t\t\t\t} else if (type === 'D') {\n\t\t\t\t\tif (currentYear === moment(item, 'YYYYMMDD').year()) { return moment(item, 'YYYYMMDD').format('DD MMM') } else { return moment(item, 'YYYYMMDD').format('DD MMM YY') }\n\t\t\t\t} else if (type === 'H') {\n\t\t\t\t\tif (currentYear === moment(item, 'YYYYMMDDHH').year()) { return moment(item, 'YYYYMMDDHH').format('HH DD') } else { return moment(item, 'YYYYMMDDHH').format('HH DD MM YY') }\n\t\t\t\t}\n\t\t\t})\n\n\t\t\treturn formattedData\n\t\t},\n\n\t},\n\tmounted() {\n\t\tvar chartDom = document.getElementById('barsworksorders010');\n\t\tthis.myChart = echarts.init(chartDom, null, { renderer: 'canvas', useDirtyRect: false });\n\n\t\tthis.myChart.on('magictypechanged', function (e) {\n\t\t\tif (e.currentType === \"line\") {\n\t\t\t\tthis.typeSerie = \"line\"\n\t\t\t} else {\n\t\t\t\tthis.typeSerie = \"bar\"\n\t\t\t}\n\t\t});\n\n\t\tthis.option && this.myChart.setOption(this.option);\n\t\tthis.myChart.resize();\n\t\tthis.showData = true;\n\t\tvar that = this;\n\t\twindow.addEventListener('resize', that.myChart.resize);\n\t}\n\t,\n\tcomputed: {\n\t\toption() {\n\t\t\treturn {\n\t\t\t\tanimation: {\n\t\t\t\t\tduration: 2000,\n\t\t\t\t\teasing: 'cubicInOut'\n\t\t\t\t},\n\t\t\t\ttoolbox: {\n\t\t\t\t\torient: 'vertical',\n\t\t\t\t\tfeature: {\n\t\t\t\t\t\tdataZoom: {\n\t\t\t\t\t\t\tyAxisIndex: 'none'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmagicType: { show: true, type: ['line', 'bar'] },\n\t\t\t\t\t\tsaveAsImage: {}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\ttooltip: { trigger: 'item',confine: true, position: 'top' },\n\t\t\t\tdataset: [{\n\t\t\t\t\tdimensions: ['user', 'value'],\n\t\t\t\t\tsource: this.source\n\n\n\t\t\t\t}, {\n\t\t\t\t\ttransform: {\n\t\t\t\t\t\ttype: 'sort',\n\t\t\t\t\t\tconfig: { dimension: 'user', order: 'desc' }\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\txAxis: {\n\t\t\t\t\ttype: 'category', axisLabel: {\n\t\t\t\t\t\tinterval: this.chartData.xAxis.length < 25 ? 0 : 5,\n\t\t\t\t\t\trotate: this.chartData.xAxis.length < 10 ? 0 : 30\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tyAxis: {},\n\t\t\t\tgrid: {\n\t\t\t\t\tcontainLabel: true,\n\t\t\t\t\ttop: 25, left: 5, bottom: 50, right: 5\n\t\t\t\t},\n\t\t\t\tdataZoom: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'inside',\n\t\t\t\t\t\tthrottle: 20\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t// Declare several bar series, each will be mapped\n\t\t\t\t// to a column of dataset.source by default.\n\t\t\t\tseries: {\n\t\t\t\t\tname: 'Queries',\n\t\t\t\t\ttype: this.typeSerie,\n\t\t\t\t\tencode: { x: 'user', y: 'value' },\n\t\t\t\t\tcolor: [\n\n\n\t\t\t\t\t\t'#418A8B',\n\t\t\t\t\t\t'#E5B75D',\n\t\t\t\t\t\t'#61B3CB',\n\t\t\t\t\t\t'#418A8B',\n\t\t\t\t\t\t'#A2578D',\n\t\t\t\t\t\t'#3982D0',\n\t\t\t\t\t\t'#D96D73',\n\t\t\t\t\t\t'#6DB6A1',\n\t\t\t\t\t\t'#5A59A6',\n\t\t\t\t\t\t'#F78B41',\n\t\t\t\t\t\t''\n\t\t\t\t\t],\n\n\t\t\t\t\tmarkLine: {\n\t\t\t\t\t\tdata: [{ type: 'average', name: 'Avg' }]\n\t\t\t\t\t}, markPoint: {\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ type: 'max', name: 'Max' },\n\t\t\t\t\t\t\t{ type: 'min', name: 'Min' }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_all",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-22",
                "type": "query"
              },
              "x": 19,
              "y": 6,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "querysbytime",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1669976764849",
              "customMenuOptions": [],
              "cols": 17
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "livehtml_1670234610205 (livehtml)",
              "rows": 3,
              "type": "livehtml",
              "$$hashKey": "object:427",
              "content": "<style>\n\n    .gadget-simplekpi {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      justify-content: start;\n      align-items: start;\n      margin-top:0px;     \n      font-family: 'Poppins', sans-serif;\n      overflow: hidden;     \n    }\n    \n    .ods-icon-sm {font-size: 1.5rem }\n    .avatar-sm {  height: 3rem; width: 3rem; }\n    .align-items-right { justify-content: end; }\n\n    .skeleton {\n      display: grid;\n      grid-template: 1fr 1fr/25% 1fr;\n      gap: calc(1rem * 0.5);\n      width: clamp(275px, 20vmin, 10rem);\n      padding: 1rem;\n      border: 0px solid rgba(37, 38, 39, 0.1);\n      border-radius: calc(1rem * 0.5);\n      background-color:  hsl(0 0% 0% / 0%);\n    }\n\n    .skeleton__block {\n      background: linear-gradient(-75deg, transparent 40%, hsl(0 0% 100% / 40%), transparent 60%) 0 0/200% 100%, hsl(0 0% 0% / 12%);\n      border-radius: calc(1rem * 0.5);\n      animation: load 2s infinite linear;\n      background-attachment: fixed;\n    }\n\n    @keyframes load {\n      to {\n        background-position: 200% 0;\n      }\n    }\n    .skeleton__block:first-of-type {\n      grid-row: 1/-1;\n      aspect-ratio: 1;\n    }\n\n  .bg-kpi {\n    background-color: rgb(171 121 13 / 25%)!important;\n  }\n\n  .framework__kpi-text {\n      font-size: 0.85rem;\n      line-height: 24px;       \n      white-space: nowrap;\n  }\n\n  .framework__downloads abbr { font-size: 75%}\n\n \n\n    .avatar-title {\n      box-shadow: 0 0 0 rgba(204,169,44, 0.4);\n      animation: pulse 2s infinite;\n    }\n\n    \n    @-webkit-keyframes pulse {\n      0% {\n        -webkit-box-shadow: 0 0 0 0 rgba(204,169,44, 0.4);\n      }\n      70% {\n          -webkit-box-shadow: 0 0 0 10px rgba(204,169,44, 0);\n      }\n      100% {\n          -webkit-box-shadow: 0 0 0 0 rgba(204,169,44, 0);\n      }\n    }\n    @keyframes pulse {\n      0% {\n        -moz-box-shadow: 0 0 0 0 rgba(204,169,44, 0.4);\n        box-shadow: 0 0 0 0 rgba(204,169,44, 0.4);\n      }\n      70% {\n          -moz-box-shadow: 0 0 0 10px rgba(204,169,44, 0);\n          box-shadow: 0 0 0 10px rgba(204,169,44, 0);\n      }\n      100% {\n          -moz-box-shadow: 0 0 0 0 rgba(204,169,44, 0);\n          box-shadow: 0 0 0 0 rgba(204,169,44, 0);\n      }\n    }\n    \n    inline\n</style>\n<!--Focus here and F11 to full screen editor-->\n<div class=\"gadget-simplekpi\" >  \n  <div v-if=\"loading\" class=\"skeleton\">\n    <div class=\"skeleton__block\"></div>\n    <div class=\"skeleton__block\"></div>\n    <div class=\"skeleton__block\"></div>\n  </div>\n   <!-- COMPONENT BEGIN -->\n  <div class=\"component\" v-else style=\"margin-top: 8px\">    \n      <h3  class=\"component-title\" v-if=\"component.showTitle\">{{component.title}}</h3>   \n      <div class=\"component-cards\" :style=\"setGridLayout\">\n        <div class=\"component-card summary\" v-if=\"component.summary.show\" :style=\"setComponentLayout('summary')\" >\n          <!--SUMMARY BEGIN -->   \n          <div class=\"component-card_header\" v-if=\"component.summary.showTitle\">\n            <h4 class=\"component-card_title\">{{component.summary.title}}</h4>\n          </div>\n          <div class=\"framework__data\">\n            <div class=\"framework__data-info\">\n              <div class=\"framework__period\">                \n                <span class=\"framework__kpi-text\">TOTAL FAILED QUERIES</span>\n              </div>\n              <strong class=\"framework__downloads\">{{ Number(total).toLocaleString() }}</strong>\n              <div style=\"display:inline-flex\">\n              <span class=\"badge badge-soft-success font-size-12\" style=\"height: auto;\"> {{percent}} % </span><span class=\"text-truncate\" style=\"height:auto;\">regarding the total</span>\n               </div>  \n                </div>         \n          </div>\n        </div>                \n        <!-- SUMMARY END -->\n        <div class=\"component-card chart\" v-if=\"component.chart.show\" :style=\"setComponentLayout('chart')\" >\n          <!-- CHART BEGIN -->                          \n           <div class=\"d-flex\" :class=\"component.chart.order === 1 ? 'align-items-left' : 'align-items-right'\">\n              <div class=\"avatar-sm\">\n                <span class=\"avatar-title rounded-circle bg-kpi\"><i class=\"ods-icon-calendar-cancel ods-icon-sm\"></i></span>\n              </div>              \n            </div>\n      </div>\n    </div>\n    <!-- COMPONENT END -->\n  </div>\n</div>\n",
              "nomargin": false,
              "contentcode": "//Write your Vue with ODS JSON controller code here\n\n//Focus here and F11 to full screen editor\n\n//This function will be call once to init components\n\nvm.vueconfig = {\n\tel: document.querySelector('#' + vm.id + ' vuetemplate .gadget-simplekpi'),\n\tdata:{\n\t\tds:[],\n\t\tmaskId: 'gadget-simplekpi',\n\t\telClass: '',\n\t\tcontainerClass: '',\n\t\tbackground: '#D96D73',\n\t\tbackgroundLoaded: '#FFF',\n\t\tloading: true,\n\t\tloadingTitle: 'Simple KPI',\t\t\t\n\t\t// Component\n\t\tcomponent:{\n\t\t\tshowTitle: false,\n\t\t\ttitle: 'COMPONENT TITLE - TRENDSERIES',\n\t\t\tgrid: '60px 1fr',\n\t\t\tsummary: {\n\t\t\t\tshow: true,\n\t\t\t\tshowTitle: false,\t\t\t\t\n\t\t\t\ttitle: 'Resumen de TimeSeries',\n\t\t\t\tstyle: {background: 'transparent'},\n\t\t\t\torder: 1\n\t\t\t},\n\t\t\tchart:{\n\t\t\t\tshow: true,\n\t\t\t\tstyle: {background: 'transparent' },\n\t\t\t\torder: 2\n\t\t\t}\t\t\t\t\t\n\t\t},\n\t\ttotal: 0,\n\t\tpercent:0,\t\n\t\ttotalUnit: 'Queries'\n\t},\n\tmethods:{\n\t\tdrawVueComponent: function(newData,oldData){\n\t\t\t\tthis.total = newData[0].total;\n\t\t\t\tvar that = this\n\t\t\t\tvm.get(\"QueryMetrics_total\").then(data => {that.percent = Math.round(((this.total * 100) /(data[0].total) + Number.EPSILON) * 100) / 100})\n\t\n\t\t},\n\t\tresizeEvent: function(){\n\t\t\t//Resize event\n\t\t},\n\t\tdestroyVueComponent: function(){\n\t\t\tvm.vueapp.$destroy();\n\t\t},\n\t\treceiveValue: function(data){\n\t\t\t//data received from datalink\n\t\t},\n\t\tsendValue: vm.sendValue,\n\t\tsendFilter: vm.sendFilter,\n\t\tsetComponentLayout (item) {\n\t\t\tif (this.component[item].style && this.component[item].order) {\n\t\t\t\tthis.component[item].style.order = this.component[item].order // add order to style \n\t\t\t\treturn this.component[item].style\n\t\t\t} else {\n\t\t\t\tif (this.component[item].order) { return {order: this.component[item].order} } else { return {} }\n\t\t\t}\n\t\t},\t\t\n\t\tloaded () {\t\t\t\n\t\t\tthis.loading = false\t\t\t\n\t\t}\t\t\n\t},\n\tcomputed:{\t\t\n\t\tsetGridLayout () {\n\t\t\tvar layout = !this.component.summary.show ? { gridTemplateColumns: '1fr!important' } : (this.component.grid && this.component.grid !== '') ? { gridTemplateColumns: this.component.grid + '!important' } : { gridTemplateColumns: '1fr 2fr' }\n\t\t\treturn layout\n\t\t}\t\n\t},\n\tmounted () {\t\t\n\t\tsetTimeout(() => this.loaded(), 3000)\n\t}\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_total_error",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-23",
                "type": "query"
              },
              "x": 27,
              "y": 3,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "livehtml_1670234610205",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1670234610205",
              "customMenuOptions": [],
              "cols": 9
            },
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "white",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "prettyTitle": "slowerQueries (livehtml)",
              "rows": 15,
              "type": "livehtml",
              "$$hashKey": "object:2262",
              "content": "<!--Focus here and F11 or F10 to full screen editor-->\n<!-- Write your CSS <style></style> here -->\n<div class=\"gadget-app\">\n\t<div class=\"ods-dataviz__header\"><h2 class=\"ods-dataviz__title\">The 10 Slowest Queries</h2></div>        \n        \n\t<el-table :data=\"tableData\" height=\"90%\" size=\"mini\" style=\"width: 100%\">\n\t\t<el-table-column type=\"expand\">\n\t\t\t<template slot-scope=\"props\">\n\t\t\t\t<p> <b style=\"color:#909399;\">status: </b>\n\t\t\t\t\t<span v-if=\"props.row.status == 'ERROR'\" style=\"margin-left: 10px; color:red;\">{{ props.row.status }}</span>\n\t\t\t\t\t<span v-else style=\"margin-left: 10px;  color:green; \">{{ props.row.status }}</span> </p>\n\t\t\t\t<p style=\"color:#909399;\">  query:  </p>\n\t\t\t\t<p>  {{ props.row.query }}</p>\n\t\t\t\t<p> <b style=\"color:#909399;\">queryType: </b> {{ props.row.queryType }}</p>\n\t\t\t\t<p> <b style=\"color:#909399;\">datasource: </b> {{ props.row.datasource }}</p>\n\t\t\t\t<p> <b style=\"color:#909399;\">start: </b> {{ props.row.startTime }}</p>\n\t\t\t\t<p> <b style=\"color:#909399;\">end: </b> {{ props.row.endTime }}</p>\n\t\t\t</template>\n\t\t</el-table-column>\n\t\t<el-table-column  prop=\"user\" label=\"user\">\n\t\t</el-table-column>\n\t\t<el-table-column  prop=\"entity\" label=\"entity\">\n\t\t</el-table-column>\n\t\t<el-table-column  prop=\"source\" label=\"source\">\n\t\t</el-table-column>\n\n\t\t<el-table-column  prop=\"totalMs\" label=\"total Ms\">\n\t\t\t<template slot-scope=\"scope\">\n\t\t\t\t\t <span v-if=\"scope.row.totalMs < quarter\" style=\"margin-left: 10px; color:green;\">{{ scope.row.totalMs }}</span>\n\t\t\t\t\t <span v-else-if=\"scope.row.totalMs > threeQuarters\" style=\"margin-left: 10px; color:red;\">{{ scope.row.totalMs }}</span>\n\t\t\t\t\t <span v-else style=\"margin-left: 10px;  \">{{ scope.row.totalMs }}</span>\n\t\t\t</template>\n\t\t</el-table-column>\n\t</el-table>\n</div>",
              "nomargin": false,
              "contentcode": "//Write your Vue JSON controller code here\n\n//Focus here and F11 to full screen editor\n\n//This function will be call once to init components\n\nvm.vueconfig = {\n   el: document.getElementById(vm.id).querySelector('vuetemplate  .gadget-app'),\n   data:{\n      ds:[],\n      tableData:[],\n      maxTimeValue: 100000,\n    \n    middle: 50000,\n    quarter: 25000,\n    threeQuarters: 75000\n   },\n   methods:{\n      drawVueComponent: function(newData,oldData){\n         this.tableData = newData.map(x => {\n              x.startTime = moment.utc(x.startTime).format('DD.MM.YYYY HH:mm:ss');\n              x.endTime = moment.utc(x.endTime).format('DD.MM.YYYY HH:mm:ss');\n              return x;\n            });\n      },\n      resizeEvent: function(){\n         //Resize event\n      },\n      destroyVueComponent: function(){\n         vm.vueapp.$destroy();\n      },\n      receiveValue: function(data){\n         //data received from datalink\n      },\n      sendValue: vm.sendValue,\n      sendFilter: vm.sendFilter\n   },mounted(){\n      var that = this;\n       vm.from(\"QueryMetrics_max_totalMs\").exec().then(\n         function (newData) {\n      that.maxTimeValue = newData[0].totalMs + 100;\n      that.middle = that.maxTimeValue / 2;\n      that.quarter = that.maxTimeValue / 4;\n      that.threeQuarters = (that.maxTimeValue * 3) / 4;\n   } )\n   }\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "datasource": {
                "name": "QueryMetrics_10_slowerqueries",
                "refresh": 0,
                "id": "MASTER-GadgetDatasource-24",
                "type": "query"
              },
              "x": 0,
              "y": 3,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "slowerQueries",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1671727746064",
              "customMenuOptions": [],
              "cols": 19
            }
          ],
          "title": "baseLayer",
          "$$hashKey": "object:23"
        }
      ],
      "title": "Summary Report",
      "$$hashKey": "object:4"
    },
    {
      "background": {
        "file": [],
        "color": "hsla(191, 25%, 83%, 0)"
      },
      "selectedlayer": 0,
      "icon": null,
      "layers": [
        {
          "gridboard": [
            {
              "border": {
                "color": "hsl(0, 0%, 90%)",
                "width": 0,
                "radius": 5
              },
              "padding": 0,
              "backgroundColor": "hsl(0, 0%, 100%)",
              "notshowDotsMenu": true,
              "hideBadges": true,
              "rows": 27,
              "type": "livehtml",
              "$$hashKey": "object:1825",
              "content": "<!--Focus here and F11 or F10 to full screen editor-->\n<!-- Write your CSS <style></style> here -->\n<style>\n\t.page-title-box {\n\t\tpadding-bottom: 24px;\n\t\tmargin-top: 8px\n\t}\n\n\t.align-items-center {\n\t\talign-items: center !important;\n\t}\n\n\t.justify-content-between {\n\t\tjustify-content: space-between !important;\n\t}\n\n\t.d-flex {\n\t\tdisplay: flex !important;\n\t}\n\n\t.page-title-right ol.breadcrumb {\n\t\tmargin-bottom: 0;\n\t}\n\n\t.page-title-box .breadcrumb {\n\t\tbackground-color: transparent;\n\t\tpadding: 0;\n\t}\n\n\t.breadcrumb {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tpadding: 0.75rem 1rem;\n\t\tmargin-bottom: 1rem;\n\t\tlist-style: none;\n\t}\n\n\t.breadcrumb-item>a {\n\t\tcolor: #495057;\n\t\tfont-size: 0.8125rem;\n\t}\n\n\t.breadcrumb-item.active {\n\t\tcolor: #74788d;\n\t\tfont-size: 0.8125rem;\n\t}\n\n\t.font-size-16 {\n\t\ttext-transform: uppercase;\n\t\tfont-weight: 600;\n\t\tfont-size: 16px !important;\n\t\tfont-family: 'Poppins';\n\t}\n\n\t.no-shadow {\n\t\tbox-shadow: none !important\n\t}\n\t.el-button--primary {\n\t\tcolor: #fff;\n\t\tbackground-color: #0e668c;\n\t\tborder-color: #0e668c;\n\t}\n</style>\n<div class=\"gadget-app\">\n\n\n\n<div class=\"page-title-box d-flex align-items-center  gadget-header\">\n\t\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Entity</label>\n\t\t<el-select v-model=\"valueEntity\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 240px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsEntity\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Source</label>\n\t\t<el-select v-model=\"valueSource\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 240px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsSource\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Query Type</label>\n\t\t<el-select v-model=\"valueQueryType\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 160px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsQueryType\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Users</label>\n\t\t<el-select v-model=\"valueUsers\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 240px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsUsers\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Status</label>\n\t\t<el-select v-model=\"valueStatus\" multiple filterable clearable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 160px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsStatus\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t\t<div style=\"display: inline-grid;\">\n\t\t<label for=\"name\" class=\"ods-form-item__label\">Date</label>\n\t\t<el-select v-model=\"valueDate\" filterable collapse-tags size=\"mini\"\n\t\t\tstyle=\"margin-left: 20px;width: 140px;\" placeholder=\"Select\">\n\t\t\t<el-option v-for=\"item in optionsDate\" :key=\"item\" :label=\"item\" :value=\"item\">\n\t\t\t</el-option>\n\t\t</el-select>\n\t</div>\n\t\n\t<div style=\"display: flex; justify-content: flex-end;width: 20%;margin-top:19px;\">\n\t\t<el-button type=\"primary\" icon=\"el-icon-search\" v-on:click=\"search\" size=\"mini\">Search</el-button>\n\t\t<el-button type=\"text\" v-on:click=\"reset\" size=\"mini\">Reset</el-button>\n\t</div>\n\n</div>\n \n  <div class=\"block\" style=\"width:80%;margin-left:31px;\">\n\t  <label for=\"name\" class=\"ods-form-item__label\">TotalMS</label>\n    <el-slider style=\"margin-bottom:15px;\"\n      v-model=\"timeValue\"\n      range\n      show-stops\n\t  :marks=\"marks\"\n\t  :step=\"100\"\n      :max=\"maxTimeValue\" >\n    </el-slider>\n\n  </div> \n\t<el-table id=\"eltable\"  :data=\"tableData\"  @sort-change=\"sort\" height=\"78%\" size=\"mini\" style=\"width: 100%\">\n\t\t\n\t\t<el-table-column sortable=\"custom\"   prop=\"user\" label=\"user\" >\n\t\t</el-table-column>\n\t\t\t<el-table-column sortable=\"custom\"  prop=\"queryType\" label=\"query Type\" >\n\t\t</el-table-column>\n\t\t\t<el-table-column sortable=\"custom\" prop=\"source\" label=\"source\" >\n\t\t</el-table-column>\n\t\t\t<el-table-column sortable=\"custom\" prop=\"query\" label=\"query\" width=\"500px\">\n\t\t</el-table-column>\n\t\t\t<el-table-column sortable=\"custom\" prop=\"totalMs\" label=\"total Ms\" >\n\t\t\t\t<template slot-scope=\"scope\">\n\t\t\t\t\t <span v-if=\"scope.row.totalMs < quarter\" style=\"margin-left: 10px; color:green;\">{{ scope.row.totalMs }}</span>\n\t\t\t\t\t <span v-else-if=\"scope.row.totalMs > threeQuarters\" style=\"margin-left: 10px; color:red;\">{{ scope.row.totalMs }}</span>\n\t\t\t\t\t <span v-else style=\"margin-left: 10px;  \">{{ scope.row.totalMs }}</span>\n\t\t\t</template>\n\t\t</el-table-column>\n\t\t\t<el-table-column sortable=\"custom\" prop=\"status\" label=\"status\" >\n\t\t\t\t<template slot-scope=\"scope\">\n\t\t\t\t\t <span v-if=\"scope.row.status == 'ERROR'\" style=\"margin-left: 10px; color:red;\">{{ scope.row.status }}</span>\t\t\t\t\t \n\t\t\t\t\t <span v-else style=\"margin-left: 10px;  color:green; \">{{ scope.row.status }}</span>\n\t\t\t</template>\n\t\t</el-table-column>\n\t\t\n\t\t\t<el-table-column sortable=\"custom\" prop=\"entity\" label=\"entity\" >\n\t\t\t\n\t\t</el-table-column>\n\t\t\t<el-table-column sortable=\"custom\" prop=\"datasource\" label=\"datasource\" >\n\t\t</el-table-column>\n\t\t\t<el-table-column sortable=\"custom\" prop=\"startTime\" label=\"start\"  width=\"90px\" >\n\t\t</el-table-column>\n\t\t\t<el-table-column sortable=\"custom\" prop=\"endTime\" label=\"end\" width=\"90px\">\n\t\t</el-table-column>\n\t</el-table>\n\t<el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\"\n\t\t:current-page.sync=\"currentPage\" :page-sizes=\"[10, 20, 50, 100, 500]\" :page-size=\"pageSize\"\n\t\tlayout=\"total, sizes, prev, pager, next, jumper\" :total=\"totalRecords\">\n\t</el-pagination>\n</div>",
              "nomargin": false,
              "contentcode": "//Write your Vue JSON controller code here\n\n//Focus here and F11 to full screen editor\n\n//This function will be call once to init components\n\nvm.vueconfig = {\n  el: document.getElementById(vm.id).querySelector('vuetemplate  .gadget-app'),\n  data: {\n    ds: [],\n    tableData: [],\n    page: 1,\n    pageSize: 20,\n    currentPage: 1,\n    totalRecords: 0,\n    sortField: null,\n    sortOrder: null,\n\n    optionsEntity: [],\n    valueEntity: [],\n\n    optionsQueryType: [],\n    valueQueryType: [],\n\n    optionsSource: [],\n    valueSource: [],\n\n    optionsStatus: [],\n    valueStatus: [],\n\n    optionsUsers: [],\n    valueUsers: [],\n    optionsDate: ['', 'last hour', 'last 12 hours', 'last 24 hours', 'last 7 days', 'last 1 month', 'last 3 months'],\n    valueDate: [],\n\n    maxTimeValue: 100000,\n    timeValue: [0, 100000],\n    middle: 50000,\n    quarter: 25000,\n    threeQuarters: 75000,\n    marks: {\n      0: '0%',\n      25000: '25%',\n      50000: '50%',\n      75000: '75%',\n      100000: '100%'\n    }\n\n  },\n  methods: {\n    drawVueComponent: function (newData, oldData) {\n      //This will be call on new data\n    },\n    resizeEvent: function () {\n      //Resize event\n    },\n    destroyVueComponent: function () {\n      vm.vueapp.$destroy();\n    },\n    receiveValue: function (data) {\n      //data received from datalink\n    },\n    sendValue: vm.sendValue,\n    sendFilter: vm.sendFilter,\n    handleSizeChange(val) {\n      this.pageSize = val;\n      this.loadItems();\n    },\n\n    sort(column) {\n      this.sortField = column.prop;\n      if (column.order === null || column.order === 'ascending') {\n        this.sortOrder = true;\n      } else {\n        this.sortOrder = false\n      }\n      this.loadItems()\n    },\n    handleCurrentChange(val) {\n      this.page = val\n      this.loadItems();\n    }// load items is what brings back the rows from server\n    , loadItems() {\n      var that = this;\n      //that.totalRecords = 2000;\n\n\n\n\n      var filters = [];\n      if (this.valueEntity.length > 0) {\n        filters.push({ field: 'entity', op: \"IN\", exp: \"('\" + this.valueEntity.join(\"', '\") + \"')\" });\n      }\n      if (this.valueUsers.length > 0) {\n        filters.push({ field: 'user', op: \"IN\", exp: \"('\" + this.valueUsers.join(\"', '\") + \"')\" });\n      }\n      if (this.valueSource.length > 0) {\n        filters.push({ field: 'source', op: \"IN\", exp: \"('\" + this.valueSource.join(\"', '\") + \"')\" });\n      }\n      if (this.valueStatus.length > 0) {\n        filters.push({ field: 'status', op: \"IN\", exp: \"('\" + this.valueStatus.join(\"', '\") + \"')\" });\n      }\n      if (this.valueQueryType.length > 0) {\n        filters.push({ field: 'queryType', op: \"IN\", exp: \"('\" + this.valueQueryType.join(\"', '\") + \"')\" });\n      }\n      if (this.valueDate.length > 0) {\n        var date = Date.now();\n       if (this.valueDate == 'last hour') {\n        date = date - 3600000;\n      }\n      else if (this.valueDate == 'last 12 hours') {\n        date = date - 43200000\n      }\n      else if (this.valueDate == 'last 24 hours') {\n        date = date - 86400000\n      }\n      else if (this.valueDate == 'last 7 days') {\n        date = date - 604800000\n\n      }\n      else if (this.valueDate == 'last 1 month') {\n        date = date - 2592000000\n      }\n      else if (this.valueDate == 'last 3 months') {\n        date = date - 77760000000\n      }\n      filters.push({ field: 'startTime', op: \">=\", exp: date });\n\n    }\n      filters.push({ field: 'totalMs', op: \">=\", exp: this.timeValue[0] });\n    filters.push({ field: 'totalMs', op: \"<=\", exp: this.timeValue[1] });\n\n    vm.from('QueryMetrics_count_all').filter(filters).exec().then(data => {\n      if (data.length == 0) {\n        that.totalRecords = 0;\n        that.tableData = [];\n      } else {\n        that.totalRecords = data[0].total;\n        var pag = that.currentPage - 1;\n        if (that.sortField != null) {\n          vm.from(\"QueryMetrics_all_disorderly\").filter(filters).sort([{ \"field\": that.sortField, \"asc\": that.sortOrder }]).offset(that.pageSize * pag).limit(that.pageSize).exec().then(data => {\n            that.tableData = data.map(x => {\n              x.startTime = moment.utc(x.startTime).format('DD.MM.YYYY HH:mm:ss');\n              x.endTime = moment.utc(x.endTime).format('DD.MM.YYYY HH:mm:ss');\n              return x;\n            });;\n          })\n        } else {\n          vm.from(\"QueryMetrics_all_disorderly\").filter(filters).offset(that.pageSize * pag).limit(that.pageSize).exec().then(data => {\n            that.tableData = data.map(x => {\n              x.startTime = moment.utc(x.startTime).format('DD.MM.YYYY HH:mm:ss');\n              x.endTime = moment.utc(x.endTime).format('DD.MM.YYYY HH:mm:ss');\n              return x;\n            });;\n          })\n        }\n      }\n\n\n\n    })\n\n\n\n\n\n\n\n  },\n  search: function (e) {\n    this.loadItems();\n  },\n  reset: function (e) {\n\n    this.valueEntity = [];\n    this.valueQueryType = [];\n    this.valueSource = [];\n    this.valueStatus = [];\n    this.valueUsers = [];\n    this.valueDate='';\n    this.timeValue = [0, this.maxTimeValue + 100];\n    this.search();\n  },\n\n\n},\n  mounted() {\n  this.loadItems()\n  var that = this\n\n  //ENTITY\n  vm.from(\"QueryMetrics_distinct_entity\").exec().then(\n    function (newData) {\n      that.optionsEntity = [];\n      if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n        for (var i = 0; i < newData.length; i++) {\n          that.optionsEntity.push({ value: newData[i].entity, label: newData[i].entity });\n        }\n      }\n    }\n  );\n\n  //QUERY TYPE\n  vm.from(\"QueryMetrics_distinct_queryType\").exec().then(\n    function (newData) {\n      that.optionsQueryType = [];\n      if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n        for (var i = 0; i < newData.length; i++) {\n          that.optionsQueryType.push({ value: newData[i].queryType, label: newData[i].queryType });\n        }\n      }\n    }\n  );\n\n  //SOURCE\n  vm.from(\"QueryMetrics_distinct_source\").exec().then(\n    function (newData) {\n      that.optionsSource = [];\n      if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n        for (var i = 0; i < newData.length; i++) {\n          that.optionsSource.push({ value: newData[i].source, label: newData[i].source });\n        }\n      }\n    }\n  );\n  //STATUS\n  vm.from(\"QueryMetrics_distinct_status\").exec().then(\n    function (newData) {\n      that.optionsStatus = [];\n      if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n        for (var i = 0; i < newData.length; i++) {\n          that.optionsStatus.push({ value: newData[i].status, label: newData[i].status });\n        }\n      }\n    }\n  );\n  //USERS\n  vm.from(\"QueryMetrics_distinct_users\").exec().then(\n    function (newData) {\n      that.optionsUsers = [];\n      if (typeof newData !== 'undefined' && newData != null && newData.length > 0) {\n        for (var i = 0; i < newData.length; i++) {\n          that.optionsUsers.push({ value: newData[i].user, label: newData[i].user });\n        }\n      }\n    }\n  );\n  //totalMs\n  vm.from(\"QueryMetrics_max_totalMs\").exec().then(\n    function (newData) {\n      that.maxTimeValue = newData[0].totalMs + 100;\n      that.middle = that.maxTimeValue / 2;\n      that.quarter = that.maxTimeValue / 4;\n      that.threeQuarters = (that.maxTimeValue * 3) / 4;\n\n\n      that.timeValue = [0, that.maxTimeValue + 100];\n      that.marks = { 0: '0%' };\n      that.marks[that.quarter] = '25%';\n      that.marks[that.middle] = '50%';\n      that.marks[that.threeQuarters] = '75%';\n      that.marks[that.maxTimeValue] = '100%';\n\n\n\n    }\n  );\n}\n\n}\n\n//Init Vue app\nvm.vueapp = new Vue(vm.vueconfig);\n",
              "subtype": "vueJS",
              "x": 0,
              "y": 0,
              "header": {
                "backgroundColor": "hsl(0, 0%, 100%)",
                "enable": false,
                "title": {
                  "iconColor": "hsl( 206, 54%, 5%)",
                  "icon": "",
                  "text": "livehtml_1670427211288",
                  "textColor": "hsl(206,54%,5%)"
                },
                "height": 40
              },
              "id": "livehtml_1670427211288",
              "customMenuOptions": [],
              "cols": 50
            }
          ],
          "title": "baseLayer",
          "$$hashKey": "object:1806"
        }
      ],
      "title": "Detail",
      "$$hashKey": "object:1613"
    }
  ],
  "interactionHash": {
    "livehtml_1669717583701": [
      {
        "targetList": [
          {
            "gadgetId": "livehtml_1669735509295",
            "overwriteField": "entity"
          },
          {
            "gadgetId": "livehtml_1669718717969",
            "overwriteField": "entity"
          },
          {
            "gadgetId": "livehtml_1669734374016",
            "overwriteField": "entity"
          },
          {
            "gadgetId": "livehtml_1669976764849",
            "overwriteField": "entity"
          },
          {
            "gadgetId": "livehtml_1669718295193",
            "overwriteField": "entity"
          },
          {
            "gadgetId": "livehtml_1669718212452",
            "overwriteField": "entity"
          },
          {
            "gadgetId": "livehtml_1671727746064",
            "overwriteField": "entity"
          }
        ],
        "emiterField": "entity"
      },
      {
        "targetList": [
          {
            "gadgetId": "livehtml_1669735509295",
            "overwriteField": "user"
          },
          {
            "gadgetId": "livehtml_1669718717969",
            "overwriteField": "user"
          },
          {
            "gadgetId": "livehtml_1669734374016",
            "overwriteField": "user"
          },
          {
            "gadgetId": "livehtml_1669976764849",
            "overwriteField": "user"
          },
          {
            "gadgetId": "livehtml_1669718295193",
            "overwriteField": "user"
          },
          {
            "gadgetId": "livehtml_1669718212452",
            "overwriteField": "user"
          },
          {
            "gadgetId": "livehtml_1671727746064",
            "overwriteField": "user"
          }
        ],
        "emiterField": "user"
      },
      {
        "targetList": [
          {
            "gadgetId": "livehtml_1669735509295",
            "overwriteField": "status"
          },
          {
            "gadgetId": "livehtml_1669718717969",
            "overwriteField": "status"
          },
          {
            "gadgetId": "livehtml_1669734374016",
            "overwriteField": "status"
          },
          {
            "gadgetId": "livehtml_1669976764849",
            "overwriteField": "status"
          },
          {
            "gadgetId": "livehtml_1669718295193",
            "overwriteField": "status"
          },
          {
            "gadgetId": "livehtml_1669718212452",
            "overwriteField": "status"
          },
          {
            "gadgetId": "livehtml_1671727746064",
            "overwriteField": "status"
          }
        ],
        "emiterField": "status"
      },
      {
        "targetList": [
          {
            "gadgetId": "livehtml_1669735509295",
            "overwriteField": "source"
          },
          {
            "gadgetId": "livehtml_1669718717969",
            "overwriteField": "source"
          },
          {
            "gadgetId": "livehtml_1669734374016",
            "overwriteField": "source"
          },
          {
            "gadgetId": "livehtml_1669976764849",
            "overwriteField": "source"
          },
          {
            "gadgetId": "livehtml_1669718295193",
            "overwriteField": "source"
          },
          {
            "gadgetId": "livehtml_1669718212452",
            "overwriteField": "source"
          },
          {
            "gadgetId": "livehtml_1671727746064",
            "overwriteField": "source"
          }
        ],
        "emiterField": "source"
      },
      {
        "targetList": [
          {
            "gadgetId": "livehtml_1669735509295",
            "overwriteField": "queryType"
          },
          {
            "gadgetId": "livehtml_1669718717969",
            "overwriteField": "queryType"
          },
          {
            "gadgetId": "livehtml_1669734374016",
            "overwriteField": "queryType"
          },
          {
            "gadgetId": "livehtml_1669976764849",
            "overwriteField": "queryType"
          },
          {
            "gadgetId": "livehtml_1669718295193",
            "overwriteField": "queryType"
          },
          {
            "gadgetId": "livehtml_1669718212452",
            "overwriteField": "queryType"
          },
          {
            "gadgetId": "livehtml_1671727746064",
            "overwriteField": "queryType"
          }
        ],
        "emiterField": "queryType"
      }
    ],
    "livehtml_1669717827887": [],
    "livehtml_1669718212452": [],
    "livehtml_1669718295193": [],
    "livehtml_1669718717969": [],
    "livehtml_1669734374016": [],
    "livehtml_1669735509295": [],
    "livehtml_1669976764849": [],
    "livehtml_1670234610205": [],
    "livehtml_1671727746064": [],
    "livehtml_1670427211288": []
  },
  "gridOptions": {
    "displayGrid": "onDrag&Resize",
    "maxItemRows": 5000,
    "outerMargin": true,
    "disableWindowResize": false,
    "minCols": 50,
    "defaultItemCols": 1,
    "disableLiveResize": true,
    "maxItemArea": 25000,
    "minItemRows": 1,
    "emptyCellDragMaxCols": 5000,
    "enableEmptyCellDrag": false,
    "maxRows": 110,
    "enableEmptyCellAlign": true,
    "draggable": {
      "delayStart": 100,
      "ignoreContent": true,
      "dragHandleClass": "drag-handler",
      "enabled": true
    },
    "gridType": "scrollVertical",
    "minItemArea": 1,
    "compactType": "none",
    "pushDirections": {
      "east": true,
      "south": true,
      "north": true,
      "west": true
    },
    "disableLiveMove": true,
    "disablePushOnResize": true,
    "maxItemCols": 5000,
    "margin": 15,
    "minRows": 110,
    "resizable": {
      "delayStart": 0,
      "enabled": true
    },
    "swap": true,
    "defaultItemRows": 1,
    "enableEmptyCellContextMenu": false,
    "enableEmptyCellDrop": true,
    "scrollToNewItems": false,
    "dragGadgetType": "livehtml",
    "fixedRowHeight": 40,
    "minItemCols": 1,
    "emptyCellDragMaxRows": 5000,
    "disablePushOnDrag": true,
    "pushResizeItems": false,
    "mobileBreakpoint": 640,
    "disableWarnings": false,
    "keepFixedWidthInMobile": false,
    "fixedColWidth": 50,
    "enableEmptyCellClick": false,
    "maxCols": 50,
    "pushItems": false
  },
  "editButtonsIframe": {
    "urlParameterButton": true,
    "trashButton": false,
    "editGadgetMenu": true,
    "closeButton": false,
    "configButton": true,
    "dataLinkButton": true,
    "addElementButton": true,
    "moveToolBarButton": true,
    "active": true,
    "filterGadgetMenu": true
  },
  "header": {
    "backgroundColor": "hsla(0, 0%, 100%, 0)",
    "enable": false,
    "pageColor": "hsl(205, 35%, 48%)",
    "iconColor": "hsl(206, 4%, 38%)",
    "logo": {
      "height": 48
    },
    "title": "DASHBOARD",
    "textColor": "hsl(206, 5%, 43%)",
    "height": 52
  },
  "parameterHash": {},
  "updatedAt": 1673355903223
}